logger:
  level: debug
  type: text
  output: stdout
# DB and Server configurations are defaulted for local development
# db:
#   host: localhost
#   port: 5432
#   user: postgres
#   password: changeme
services:
  kas:
    keyring:
      - kid: e1
        alg: ec:secp256r1
      - kid: e1
        alg: ec:secp256r1
        legacy: true
      - kid: r1
        alg: rsa:2048
      - kid: r1
        alg: rsa:2048
        legacy: true
  entityresolution:
    url: http://localhost:65432/auth
    log_level: info
    clientid: 'tdf-entity-resolution'
    clientsecret: 'secret'
    realm: 'opentdf'
    legacykeycloak: true
    inferid:
      from:
        email: true
        username: true
  # policy is enabled by default in mode 'all'
  # policy:
  #   enabled: true
  # list_request_limit_default: 1000
  # list_request_limit_max: 2500
server:
  tls:
    enabled: false
    cert: ./keys/platform.crt
    key: ./keys/platform-key.pem
  auth:
    enabled: true
    public_client_id: 'opentdf-public'
    audience: 'http://localhost:65432'
    issuer: http://localhost:65432/auth/realms/opentdf
    policy:
      ## Dot notation is used to access nested claims (i.e. realm_access.roles)
      # Claim that represents the user (i.e. email)
      username_claim: # preferred_username
      # That claim to access groups (i.e. realm_access.roles)
      groups_claim: # realm_access.roles
      ## Extends the builtin policy
      extension: |
        g, opentdf-admin, role:admin
        g, opentdf-standard, role:standard
      ## Custom policy that overrides builtin policy (see examples https://github.com/casbin/casbin/tree/master/examples)
      csv: #|
      #  p, role:admin, *, *, allow
      ## Custom model (see https://casbin.org/docs/syntax-for-models/)
      model: #|
      #  [request_definition]
      #  r = sub, res, act, obj
      #
      #  [policy_definition]
      #  p = sub, res, act, obj, eft
      #
      #  [role_definition]
      #  g = _, _
      #
      #  [policy_effect]
      #  e = some(where (p.eft == allow)) && !some(where (p.eft == deny))
      #
      #  [matchers]
      #  m = g(r.sub, p.sub) && globOrRegexMatch(r.res, p.res) && globOrRegexMatch(r.act, p.act) && globOrRegexMatch(r.obj, p.obj)
  grpc:
    reflectionEnabled: true # Default is false
  cryptoProvider:
    type: standard
    standard:
      keys:
        - kid: r1
          alg: rsa:2048
          private: kas-private.pem
          cert: kas-cert.pem
        - kid: e1
          alg: ec:secp256r1
          private: kas-ec-private.pem
          cert: kas-ec-cert.pem
  port: 8080
