// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file policy/attributes/attributes.proto (package policy.attributes, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ActiveStateEnum, MetadataMutable, MetadataUpdateEnum } from "../../common/common_pb.js";
import { Attribute, AttributeRuleTypeEnum, Value } from "../objects_pb.js";
import { AttributeValueSelector } from "../selectors_pb.js";

/**
 * @generated from message policy.attributes.AttributeKeyAccessServer
 */
export class AttributeKeyAccessServer extends Message<AttributeKeyAccessServer> {
  /**
   * @generated from field: string attribute_id = 1;
   */
  attributeId = "";

  /**
   * @generated from field: string key_access_server_id = 2;
   */
  keyAccessServerId = "";

  constructor(data?: PartialMessage<AttributeKeyAccessServer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.AttributeKeyAccessServer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_access_server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttributeKeyAccessServer {
    return new AttributeKeyAccessServer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttributeKeyAccessServer {
    return new AttributeKeyAccessServer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttributeKeyAccessServer {
    return new AttributeKeyAccessServer().fromJsonString(jsonString, options);
  }

  static equals(a: AttributeKeyAccessServer | PlainMessage<AttributeKeyAccessServer> | undefined, b: AttributeKeyAccessServer | PlainMessage<AttributeKeyAccessServer> | undefined): boolean {
    return proto3.util.equals(AttributeKeyAccessServer, a, b);
  }
}

/**
 * @generated from message policy.attributes.ValueKeyAccessServer
 */
export class ValueKeyAccessServer extends Message<ValueKeyAccessServer> {
  /**
   * @generated from field: string value_id = 1;
   */
  valueId = "";

  /**
   * @generated from field: string key_access_server_id = 2;
   */
  keyAccessServerId = "";

  constructor(data?: PartialMessage<ValueKeyAccessServer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.ValueKeyAccessServer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_access_server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueKeyAccessServer {
    return new ValueKeyAccessServer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueKeyAccessServer {
    return new ValueKeyAccessServer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueKeyAccessServer {
    return new ValueKeyAccessServer().fromJsonString(jsonString, options);
  }

  static equals(a: ValueKeyAccessServer | PlainMessage<ValueKeyAccessServer> | undefined, b: ValueKeyAccessServer | PlainMessage<ValueKeyAccessServer> | undefined): boolean {
    return proto3.util.equals(ValueKeyAccessServer, a, b);
  }
}

/**
 * @generated from message policy.attributes.ListAttributesRequest
 */
export class ListAttributesRequest extends Message<ListAttributesRequest> {
  /**
   * ACTIVE by default when not specified
   *
   * @generated from field: common.ActiveStateEnum state = 1;
   */
  state = ActiveStateEnum.UNSPECIFIED;

  /**
   * can be id or name
   *
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  constructor(data?: PartialMessage<ListAttributesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.ListAttributesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(ActiveStateEnum) },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAttributesRequest {
    return new ListAttributesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAttributesRequest {
    return new ListAttributesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAttributesRequest {
    return new ListAttributesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAttributesRequest | PlainMessage<ListAttributesRequest> | undefined, b: ListAttributesRequest | PlainMessage<ListAttributesRequest> | undefined): boolean {
    return proto3.util.equals(ListAttributesRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.ListAttributesResponse
 */
export class ListAttributesResponse extends Message<ListAttributesResponse> {
  /**
   * @generated from field: repeated policy.Attribute attributes = 1;
   */
  attributes: Attribute[] = [];

  constructor(data?: PartialMessage<ListAttributesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.ListAttributesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attributes", kind: "message", T: Attribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAttributesResponse {
    return new ListAttributesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAttributesResponse {
    return new ListAttributesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAttributesResponse {
    return new ListAttributesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAttributesResponse | PlainMessage<ListAttributesResponse> | undefined, b: ListAttributesResponse | PlainMessage<ListAttributesResponse> | undefined): boolean {
    return proto3.util.equals(ListAttributesResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.GetAttributeRequest
 */
export class GetAttributeRequest extends Message<GetAttributeRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetAttributeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.GetAttributeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAttributeRequest {
    return new GetAttributeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAttributeRequest {
    return new GetAttributeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAttributeRequest {
    return new GetAttributeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAttributeRequest | PlainMessage<GetAttributeRequest> | undefined, b: GetAttributeRequest | PlainMessage<GetAttributeRequest> | undefined): boolean {
    return proto3.util.equals(GetAttributeRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.GetAttributeResponse
 */
export class GetAttributeResponse extends Message<GetAttributeResponse> {
  /**
   * @generated from field: policy.Attribute attribute = 1;
   */
  attribute?: Attribute;

  constructor(data?: PartialMessage<GetAttributeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.GetAttributeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute", kind: "message", T: Attribute },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAttributeResponse {
    return new GetAttributeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAttributeResponse {
    return new GetAttributeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAttributeResponse {
    return new GetAttributeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAttributeResponse | PlainMessage<GetAttributeResponse> | undefined, b: GetAttributeResponse | PlainMessage<GetAttributeResponse> | undefined): boolean {
    return proto3.util.equals(GetAttributeResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.CreateAttributeRequest
 */
export class CreateAttributeRequest extends Message<CreateAttributeRequest> {
  /**
   * Required
   *
   * @generated from field: string namespace_id = 1;
   */
  namespaceId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: policy.AttributeRuleTypeEnum rule = 3;
   */
  rule = AttributeRuleTypeEnum.UNSPECIFIED;

  /**
   * Optional attribute values (when provided) must be alphanumeric strings, allowing hyphens and underscores but not as the first or last character.
   * The stored attribute value will be normalized to lower case.
   *
   * @generated from field: repeated string values = 4;
   */
  values: string[] = [];

  /**
   * Optional
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  constructor(data?: PartialMessage<CreateAttributeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.CreateAttributeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rule", kind: "enum", T: proto3.getEnumType(AttributeRuleTypeEnum) },
    { no: 4, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 100, name: "metadata", kind: "message", T: MetadataMutable },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAttributeRequest {
    return new CreateAttributeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAttributeRequest {
    return new CreateAttributeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAttributeRequest {
    return new CreateAttributeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAttributeRequest | PlainMessage<CreateAttributeRequest> | undefined, b: CreateAttributeRequest | PlainMessage<CreateAttributeRequest> | undefined): boolean {
    return proto3.util.equals(CreateAttributeRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.CreateAttributeResponse
 */
export class CreateAttributeResponse extends Message<CreateAttributeResponse> {
  /**
   * @generated from field: policy.Attribute attribute = 1;
   */
  attribute?: Attribute;

  constructor(data?: PartialMessage<CreateAttributeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.CreateAttributeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute", kind: "message", T: Attribute },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAttributeResponse {
    return new CreateAttributeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAttributeResponse {
    return new CreateAttributeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAttributeResponse {
    return new CreateAttributeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAttributeResponse | PlainMessage<CreateAttributeResponse> | undefined, b: CreateAttributeResponse | PlainMessage<CreateAttributeResponse> | undefined): boolean {
    return proto3.util.equals(CreateAttributeResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.UpdateAttributeRequest
 */
export class UpdateAttributeRequest extends Message<UpdateAttributeRequest> {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Optional
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  /**
   * @generated from field: common.MetadataUpdateEnum metadata_update_behavior = 101;
   */
  metadataUpdateBehavior = MetadataUpdateEnum.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateAttributeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.UpdateAttributeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 100, name: "metadata", kind: "message", T: MetadataMutable },
    { no: 101, name: "metadata_update_behavior", kind: "enum", T: proto3.getEnumType(MetadataUpdateEnum) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAttributeRequest {
    return new UpdateAttributeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAttributeRequest {
    return new UpdateAttributeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAttributeRequest {
    return new UpdateAttributeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAttributeRequest | PlainMessage<UpdateAttributeRequest> | undefined, b: UpdateAttributeRequest | PlainMessage<UpdateAttributeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAttributeRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.UpdateAttributeResponse
 */
export class UpdateAttributeResponse extends Message<UpdateAttributeResponse> {
  /**
   * @generated from field: policy.Attribute attribute = 1;
   */
  attribute?: Attribute;

  constructor(data?: PartialMessage<UpdateAttributeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.UpdateAttributeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute", kind: "message", T: Attribute },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAttributeResponse {
    return new UpdateAttributeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAttributeResponse {
    return new UpdateAttributeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAttributeResponse {
    return new UpdateAttributeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAttributeResponse | PlainMessage<UpdateAttributeResponse> | undefined, b: UpdateAttributeResponse | PlainMessage<UpdateAttributeResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAttributeResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.DeactivateAttributeRequest
 */
export class DeactivateAttributeRequest extends Message<DeactivateAttributeRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeactivateAttributeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.DeactivateAttributeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateAttributeRequest {
    return new DeactivateAttributeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateAttributeRequest {
    return new DeactivateAttributeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateAttributeRequest {
    return new DeactivateAttributeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeactivateAttributeRequest | PlainMessage<DeactivateAttributeRequest> | undefined, b: DeactivateAttributeRequest | PlainMessage<DeactivateAttributeRequest> | undefined): boolean {
    return proto3.util.equals(DeactivateAttributeRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.DeactivateAttributeResponse
 */
export class DeactivateAttributeResponse extends Message<DeactivateAttributeResponse> {
  /**
   * @generated from field: policy.Attribute attribute = 1;
   */
  attribute?: Attribute;

  constructor(data?: PartialMessage<DeactivateAttributeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.DeactivateAttributeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute", kind: "message", T: Attribute },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateAttributeResponse {
    return new DeactivateAttributeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateAttributeResponse {
    return new DeactivateAttributeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateAttributeResponse {
    return new DeactivateAttributeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeactivateAttributeResponse | PlainMessage<DeactivateAttributeResponse> | undefined, b: DeactivateAttributeResponse | PlainMessage<DeactivateAttributeResponse> | undefined): boolean {
    return proto3.util.equals(DeactivateAttributeResponse, a, b);
  }
}

/**
 * /
 * / Value RPC messages
 * /
 *
 * @generated from message policy.attributes.GetAttributeValueRequest
 */
export class GetAttributeValueRequest extends Message<GetAttributeValueRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetAttributeValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.GetAttributeValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAttributeValueRequest {
    return new GetAttributeValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAttributeValueRequest {
    return new GetAttributeValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAttributeValueRequest {
    return new GetAttributeValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAttributeValueRequest | PlainMessage<GetAttributeValueRequest> | undefined, b: GetAttributeValueRequest | PlainMessage<GetAttributeValueRequest> | undefined): boolean {
    return proto3.util.equals(GetAttributeValueRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.GetAttributeValueResponse
 */
export class GetAttributeValueResponse extends Message<GetAttributeValueResponse> {
  /**
   * @generated from field: policy.Value value = 1;
   */
  value?: Value;

  constructor(data?: PartialMessage<GetAttributeValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.GetAttributeValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAttributeValueResponse {
    return new GetAttributeValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAttributeValueResponse {
    return new GetAttributeValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAttributeValueResponse {
    return new GetAttributeValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAttributeValueResponse | PlainMessage<GetAttributeValueResponse> | undefined, b: GetAttributeValueResponse | PlainMessage<GetAttributeValueResponse> | undefined): boolean {
    return proto3.util.equals(GetAttributeValueResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.ListAttributeValuesRequest
 */
export class ListAttributeValuesRequest extends Message<ListAttributeValuesRequest> {
  /**
   * @generated from field: string attribute_id = 1;
   */
  attributeId = "";

  /**
   * ACTIVE by default when not specified
   *
   * @generated from field: common.ActiveStateEnum state = 2;
   */
  state = ActiveStateEnum.UNSPECIFIED;

  constructor(data?: PartialMessage<ListAttributeValuesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.ListAttributeValuesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(ActiveStateEnum) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAttributeValuesRequest {
    return new ListAttributeValuesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAttributeValuesRequest {
    return new ListAttributeValuesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAttributeValuesRequest {
    return new ListAttributeValuesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAttributeValuesRequest | PlainMessage<ListAttributeValuesRequest> | undefined, b: ListAttributeValuesRequest | PlainMessage<ListAttributeValuesRequest> | undefined): boolean {
    return proto3.util.equals(ListAttributeValuesRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.ListAttributeValuesResponse
 */
export class ListAttributeValuesResponse extends Message<ListAttributeValuesResponse> {
  /**
   * @generated from field: repeated policy.Value values = 1;
   */
  values: Value[] = [];

  constructor(data?: PartialMessage<ListAttributeValuesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.ListAttributeValuesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAttributeValuesResponse {
    return new ListAttributeValuesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAttributeValuesResponse {
    return new ListAttributeValuesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAttributeValuesResponse {
    return new ListAttributeValuesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAttributeValuesResponse | PlainMessage<ListAttributeValuesResponse> | undefined, b: ListAttributeValuesResponse | PlainMessage<ListAttributeValuesResponse> | undefined): boolean {
    return proto3.util.equals(ListAttributeValuesResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.CreateAttributeValueRequest
 */
export class CreateAttributeValueRequest extends Message<CreateAttributeValueRequest> {
  /**
   * Required
   *
   * @generated from field: string attribute_id = 1;
   */
  attributeId = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * Optional
   *
   * @generated from field: repeated string members = 3;
   */
  members: string[] = [];

  /**
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  constructor(data?: PartialMessage<CreateAttributeValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.CreateAttributeValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "members", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 100, name: "metadata", kind: "message", T: MetadataMutable },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAttributeValueRequest {
    return new CreateAttributeValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAttributeValueRequest {
    return new CreateAttributeValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAttributeValueRequest {
    return new CreateAttributeValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAttributeValueRequest | PlainMessage<CreateAttributeValueRequest> | undefined, b: CreateAttributeValueRequest | PlainMessage<CreateAttributeValueRequest> | undefined): boolean {
    return proto3.util.equals(CreateAttributeValueRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.CreateAttributeValueResponse
 */
export class CreateAttributeValueResponse extends Message<CreateAttributeValueResponse> {
  /**
   * @generated from field: policy.Value value = 1;
   */
  value?: Value;

  constructor(data?: PartialMessage<CreateAttributeValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.CreateAttributeValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAttributeValueResponse {
    return new CreateAttributeValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAttributeValueResponse {
    return new CreateAttributeValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAttributeValueResponse {
    return new CreateAttributeValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAttributeValueResponse | PlainMessage<CreateAttributeValueResponse> | undefined, b: CreateAttributeValueResponse | PlainMessage<CreateAttributeValueResponse> | undefined): boolean {
    return proto3.util.equals(CreateAttributeValueResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.UpdateAttributeValueRequest
 */
export class UpdateAttributeValueRequest extends Message<UpdateAttributeValueRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Optional
   *
   * @generated from field: repeated string members = 4;
   */
  members: string[] = [];

  /**
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  /**
   * @generated from field: common.MetadataUpdateEnum metadata_update_behavior = 101;
   */
  metadataUpdateBehavior = MetadataUpdateEnum.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateAttributeValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.UpdateAttributeValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "members", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 100, name: "metadata", kind: "message", T: MetadataMutable },
    { no: 101, name: "metadata_update_behavior", kind: "enum", T: proto3.getEnumType(MetadataUpdateEnum) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAttributeValueRequest {
    return new UpdateAttributeValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAttributeValueRequest {
    return new UpdateAttributeValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAttributeValueRequest {
    return new UpdateAttributeValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAttributeValueRequest | PlainMessage<UpdateAttributeValueRequest> | undefined, b: UpdateAttributeValueRequest | PlainMessage<UpdateAttributeValueRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAttributeValueRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.UpdateAttributeValueResponse
 */
export class UpdateAttributeValueResponse extends Message<UpdateAttributeValueResponse> {
  /**
   * @generated from field: policy.Value value = 1;
   */
  value?: Value;

  constructor(data?: PartialMessage<UpdateAttributeValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.UpdateAttributeValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAttributeValueResponse {
    return new UpdateAttributeValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAttributeValueResponse {
    return new UpdateAttributeValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAttributeValueResponse {
    return new UpdateAttributeValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAttributeValueResponse | PlainMessage<UpdateAttributeValueResponse> | undefined, b: UpdateAttributeValueResponse | PlainMessage<UpdateAttributeValueResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAttributeValueResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.DeactivateAttributeValueRequest
 */
export class DeactivateAttributeValueRequest extends Message<DeactivateAttributeValueRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeactivateAttributeValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.DeactivateAttributeValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateAttributeValueRequest {
    return new DeactivateAttributeValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateAttributeValueRequest {
    return new DeactivateAttributeValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateAttributeValueRequest {
    return new DeactivateAttributeValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeactivateAttributeValueRequest | PlainMessage<DeactivateAttributeValueRequest> | undefined, b: DeactivateAttributeValueRequest | PlainMessage<DeactivateAttributeValueRequest> | undefined): boolean {
    return proto3.util.equals(DeactivateAttributeValueRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.DeactivateAttributeValueResponse
 */
export class DeactivateAttributeValueResponse extends Message<DeactivateAttributeValueResponse> {
  /**
   * @generated from field: policy.Value value = 1;
   */
  value?: Value;

  constructor(data?: PartialMessage<DeactivateAttributeValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.DeactivateAttributeValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeactivateAttributeValueResponse {
    return new DeactivateAttributeValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeactivateAttributeValueResponse {
    return new DeactivateAttributeValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeactivateAttributeValueResponse {
    return new DeactivateAttributeValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeactivateAttributeValueResponse | PlainMessage<DeactivateAttributeValueResponse> | undefined, b: DeactivateAttributeValueResponse | PlainMessage<DeactivateAttributeValueResponse> | undefined): boolean {
    return proto3.util.equals(DeactivateAttributeValueResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.GetAttributeValuesByFqnsRequest
 */
export class GetAttributeValuesByFqnsRequest extends Message<GetAttributeValuesByFqnsRequest> {
  /**
   * Required
   * Fully Qualified Names of attribute values (i.e. https://<namespace>/attr/<attribute_name>/value/<value_name>), normalized to lower case.
   *
   * @generated from field: repeated string fqns = 1;
   */
  fqns: string[] = [];

  /**
   * @generated from field: policy.AttributeValueSelector with_value = 2;
   */
  withValue?: AttributeValueSelector;

  constructor(data?: PartialMessage<GetAttributeValuesByFqnsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.GetAttributeValuesByFqnsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "with_value", kind: "message", T: AttributeValueSelector },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAttributeValuesByFqnsRequest {
    return new GetAttributeValuesByFqnsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAttributeValuesByFqnsRequest {
    return new GetAttributeValuesByFqnsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAttributeValuesByFqnsRequest {
    return new GetAttributeValuesByFqnsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAttributeValuesByFqnsRequest | PlainMessage<GetAttributeValuesByFqnsRequest> | undefined, b: GetAttributeValuesByFqnsRequest | PlainMessage<GetAttributeValuesByFqnsRequest> | undefined): boolean {
    return proto3.util.equals(GetAttributeValuesByFqnsRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.GetAttributeValuesByFqnsResponse
 */
export class GetAttributeValuesByFqnsResponse extends Message<GetAttributeValuesByFqnsResponse> {
  /**
   * map of FQNs to complete attributes and the one selected value
   *
   * @generated from field: map<string, policy.attributes.GetAttributeValuesByFqnsResponse.AttributeAndValue> fqn_attribute_values = 1;
   */
  fqnAttributeValues: { [key: string]: GetAttributeValuesByFqnsResponse_AttributeAndValue } = {};

  constructor(data?: PartialMessage<GetAttributeValuesByFqnsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.GetAttributeValuesByFqnsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqn_attribute_values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GetAttributeValuesByFqnsResponse_AttributeAndValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAttributeValuesByFqnsResponse {
    return new GetAttributeValuesByFqnsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAttributeValuesByFqnsResponse {
    return new GetAttributeValuesByFqnsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAttributeValuesByFqnsResponse {
    return new GetAttributeValuesByFqnsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAttributeValuesByFqnsResponse | PlainMessage<GetAttributeValuesByFqnsResponse> | undefined, b: GetAttributeValuesByFqnsResponse | PlainMessage<GetAttributeValuesByFqnsResponse> | undefined): boolean {
    return proto3.util.equals(GetAttributeValuesByFqnsResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.GetAttributeValuesByFqnsResponse.AttributeAndValue
 */
export class GetAttributeValuesByFqnsResponse_AttributeAndValue extends Message<GetAttributeValuesByFqnsResponse_AttributeAndValue> {
  /**
   * @generated from field: policy.Attribute attribute = 1;
   */
  attribute?: Attribute;

  /**
   * @generated from field: policy.Value value = 2;
   */
  value?: Value;

  constructor(data?: PartialMessage<GetAttributeValuesByFqnsResponse_AttributeAndValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.GetAttributeValuesByFqnsResponse.AttributeAndValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute", kind: "message", T: Attribute },
    { no: 2, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAttributeValuesByFqnsResponse_AttributeAndValue {
    return new GetAttributeValuesByFqnsResponse_AttributeAndValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAttributeValuesByFqnsResponse_AttributeAndValue {
    return new GetAttributeValuesByFqnsResponse_AttributeAndValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAttributeValuesByFqnsResponse_AttributeAndValue {
    return new GetAttributeValuesByFqnsResponse_AttributeAndValue().fromJsonString(jsonString, options);
  }

  static equals(a: GetAttributeValuesByFqnsResponse_AttributeAndValue | PlainMessage<GetAttributeValuesByFqnsResponse_AttributeAndValue> | undefined, b: GetAttributeValuesByFqnsResponse_AttributeAndValue | PlainMessage<GetAttributeValuesByFqnsResponse_AttributeAndValue> | undefined): boolean {
    return proto3.util.equals(GetAttributeValuesByFqnsResponse_AttributeAndValue, a, b);
  }
}

/**
 * @generated from message policy.attributes.AssignKeyAccessServerToAttributeRequest
 */
export class AssignKeyAccessServerToAttributeRequest extends Message<AssignKeyAccessServerToAttributeRequest> {
  /**
   * @generated from field: policy.attributes.AttributeKeyAccessServer attribute_key_access_server = 1;
   */
  attributeKeyAccessServer?: AttributeKeyAccessServer;

  constructor(data?: PartialMessage<AssignKeyAccessServerToAttributeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.AssignKeyAccessServerToAttributeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute_key_access_server", kind: "message", T: AttributeKeyAccessServer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignKeyAccessServerToAttributeRequest {
    return new AssignKeyAccessServerToAttributeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignKeyAccessServerToAttributeRequest {
    return new AssignKeyAccessServerToAttributeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignKeyAccessServerToAttributeRequest {
    return new AssignKeyAccessServerToAttributeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AssignKeyAccessServerToAttributeRequest | PlainMessage<AssignKeyAccessServerToAttributeRequest> | undefined, b: AssignKeyAccessServerToAttributeRequest | PlainMessage<AssignKeyAccessServerToAttributeRequest> | undefined): boolean {
    return proto3.util.equals(AssignKeyAccessServerToAttributeRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.AssignKeyAccessServerToAttributeResponse
 */
export class AssignKeyAccessServerToAttributeResponse extends Message<AssignKeyAccessServerToAttributeResponse> {
  /**
   * @generated from field: policy.attributes.AttributeKeyAccessServer attribute_key_access_server = 1;
   */
  attributeKeyAccessServer?: AttributeKeyAccessServer;

  constructor(data?: PartialMessage<AssignKeyAccessServerToAttributeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.AssignKeyAccessServerToAttributeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute_key_access_server", kind: "message", T: AttributeKeyAccessServer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignKeyAccessServerToAttributeResponse {
    return new AssignKeyAccessServerToAttributeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignKeyAccessServerToAttributeResponse {
    return new AssignKeyAccessServerToAttributeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignKeyAccessServerToAttributeResponse {
    return new AssignKeyAccessServerToAttributeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AssignKeyAccessServerToAttributeResponse | PlainMessage<AssignKeyAccessServerToAttributeResponse> | undefined, b: AssignKeyAccessServerToAttributeResponse | PlainMessage<AssignKeyAccessServerToAttributeResponse> | undefined): boolean {
    return proto3.util.equals(AssignKeyAccessServerToAttributeResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.RemoveKeyAccessServerFromAttributeRequest
 */
export class RemoveKeyAccessServerFromAttributeRequest extends Message<RemoveKeyAccessServerFromAttributeRequest> {
  /**
   * @generated from field: policy.attributes.AttributeKeyAccessServer attribute_key_access_server = 1;
   */
  attributeKeyAccessServer?: AttributeKeyAccessServer;

  constructor(data?: PartialMessage<RemoveKeyAccessServerFromAttributeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.RemoveKeyAccessServerFromAttributeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute_key_access_server", kind: "message", T: AttributeKeyAccessServer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveKeyAccessServerFromAttributeRequest {
    return new RemoveKeyAccessServerFromAttributeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveKeyAccessServerFromAttributeRequest {
    return new RemoveKeyAccessServerFromAttributeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveKeyAccessServerFromAttributeRequest {
    return new RemoveKeyAccessServerFromAttributeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveKeyAccessServerFromAttributeRequest | PlainMessage<RemoveKeyAccessServerFromAttributeRequest> | undefined, b: RemoveKeyAccessServerFromAttributeRequest | PlainMessage<RemoveKeyAccessServerFromAttributeRequest> | undefined): boolean {
    return proto3.util.equals(RemoveKeyAccessServerFromAttributeRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.RemoveKeyAccessServerFromAttributeResponse
 */
export class RemoveKeyAccessServerFromAttributeResponse extends Message<RemoveKeyAccessServerFromAttributeResponse> {
  /**
   * @generated from field: policy.attributes.AttributeKeyAccessServer attribute_key_access_server = 1;
   */
  attributeKeyAccessServer?: AttributeKeyAccessServer;

  constructor(data?: PartialMessage<RemoveKeyAccessServerFromAttributeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.RemoveKeyAccessServerFromAttributeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute_key_access_server", kind: "message", T: AttributeKeyAccessServer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveKeyAccessServerFromAttributeResponse {
    return new RemoveKeyAccessServerFromAttributeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveKeyAccessServerFromAttributeResponse {
    return new RemoveKeyAccessServerFromAttributeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveKeyAccessServerFromAttributeResponse {
    return new RemoveKeyAccessServerFromAttributeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveKeyAccessServerFromAttributeResponse | PlainMessage<RemoveKeyAccessServerFromAttributeResponse> | undefined, b: RemoveKeyAccessServerFromAttributeResponse | PlainMessage<RemoveKeyAccessServerFromAttributeResponse> | undefined): boolean {
    return proto3.util.equals(RemoveKeyAccessServerFromAttributeResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.AssignKeyAccessServerToValueRequest
 */
export class AssignKeyAccessServerToValueRequest extends Message<AssignKeyAccessServerToValueRequest> {
  /**
   * @generated from field: policy.attributes.ValueKeyAccessServer value_key_access_server = 1;
   */
  valueKeyAccessServer?: ValueKeyAccessServer;

  constructor(data?: PartialMessage<AssignKeyAccessServerToValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.AssignKeyAccessServerToValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value_key_access_server", kind: "message", T: ValueKeyAccessServer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignKeyAccessServerToValueRequest {
    return new AssignKeyAccessServerToValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignKeyAccessServerToValueRequest {
    return new AssignKeyAccessServerToValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignKeyAccessServerToValueRequest {
    return new AssignKeyAccessServerToValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AssignKeyAccessServerToValueRequest | PlainMessage<AssignKeyAccessServerToValueRequest> | undefined, b: AssignKeyAccessServerToValueRequest | PlainMessage<AssignKeyAccessServerToValueRequest> | undefined): boolean {
    return proto3.util.equals(AssignKeyAccessServerToValueRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.AssignKeyAccessServerToValueResponse
 */
export class AssignKeyAccessServerToValueResponse extends Message<AssignKeyAccessServerToValueResponse> {
  /**
   * @generated from field: policy.attributes.ValueKeyAccessServer value_key_access_server = 1;
   */
  valueKeyAccessServer?: ValueKeyAccessServer;

  constructor(data?: PartialMessage<AssignKeyAccessServerToValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.AssignKeyAccessServerToValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value_key_access_server", kind: "message", T: ValueKeyAccessServer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignKeyAccessServerToValueResponse {
    return new AssignKeyAccessServerToValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignKeyAccessServerToValueResponse {
    return new AssignKeyAccessServerToValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignKeyAccessServerToValueResponse {
    return new AssignKeyAccessServerToValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AssignKeyAccessServerToValueResponse | PlainMessage<AssignKeyAccessServerToValueResponse> | undefined, b: AssignKeyAccessServerToValueResponse | PlainMessage<AssignKeyAccessServerToValueResponse> | undefined): boolean {
    return proto3.util.equals(AssignKeyAccessServerToValueResponse, a, b);
  }
}

/**
 * @generated from message policy.attributes.RemoveKeyAccessServerFromValueRequest
 */
export class RemoveKeyAccessServerFromValueRequest extends Message<RemoveKeyAccessServerFromValueRequest> {
  /**
   * @generated from field: policy.attributes.ValueKeyAccessServer value_key_access_server = 1;
   */
  valueKeyAccessServer?: ValueKeyAccessServer;

  constructor(data?: PartialMessage<RemoveKeyAccessServerFromValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.RemoveKeyAccessServerFromValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value_key_access_server", kind: "message", T: ValueKeyAccessServer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveKeyAccessServerFromValueRequest {
    return new RemoveKeyAccessServerFromValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveKeyAccessServerFromValueRequest {
    return new RemoveKeyAccessServerFromValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveKeyAccessServerFromValueRequest {
    return new RemoveKeyAccessServerFromValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveKeyAccessServerFromValueRequest | PlainMessage<RemoveKeyAccessServerFromValueRequest> | undefined, b: RemoveKeyAccessServerFromValueRequest | PlainMessage<RemoveKeyAccessServerFromValueRequest> | undefined): boolean {
    return proto3.util.equals(RemoveKeyAccessServerFromValueRequest, a, b);
  }
}

/**
 * @generated from message policy.attributes.RemoveKeyAccessServerFromValueResponse
 */
export class RemoveKeyAccessServerFromValueResponse extends Message<RemoveKeyAccessServerFromValueResponse> {
  /**
   * @generated from field: policy.attributes.ValueKeyAccessServer value_key_access_server = 1;
   */
  valueKeyAccessServer?: ValueKeyAccessServer;

  constructor(data?: PartialMessage<RemoveKeyAccessServerFromValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "policy.attributes.RemoveKeyAccessServerFromValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value_key_access_server", kind: "message", T: ValueKeyAccessServer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveKeyAccessServerFromValueResponse {
    return new RemoveKeyAccessServerFromValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveKeyAccessServerFromValueResponse {
    return new RemoveKeyAccessServerFromValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveKeyAccessServerFromValueResponse {
    return new RemoveKeyAccessServerFromValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveKeyAccessServerFromValueResponse | PlainMessage<RemoveKeyAccessServerFromValueResponse> | undefined, b: RemoveKeyAccessServerFromValueResponse | PlainMessage<RemoveKeyAccessServerFromValueResponse> | undefined): boolean {
    return proto3.util.equals(RemoveKeyAccessServerFromValueResponse, a, b);
  }
}

