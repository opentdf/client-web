// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file authorization/idp_plugin.proto (package authorization, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, Struct } from "@bufbuild/protobuf";
import { Entity } from "./authorization_pb.js";

/**
 * @generated from message authorization.IdpConfig
 */
export class IdpConfig extends Message<IdpConfig> {
  /**
   * @generated from field: google.protobuf.Struct config = 1;
   */
  config?: Struct;

  constructor(data?: PartialMessage<IdpConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authorization.IdpConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdpConfig {
    return new IdpConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdpConfig {
    return new IdpConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdpConfig {
    return new IdpConfig().fromJsonString(jsonString, options);
  }

  static equals(a: IdpConfig | PlainMessage<IdpConfig> | undefined, b: IdpConfig | PlainMessage<IdpConfig> | undefined): boolean {
    return proto3.util.equals(IdpConfig, a, b);
  }
}

/**
 *
 * Example: Get idp attributes for bob and alice (both represented using an email address
 * {
 * "entities": [
 * {
 * "id": "e1",
 * "emailAddress": "bob@example.org"
 * },
 * {
 * "id": "e2",
 * "emailAddress": "alice@example.org"
 * }
 * ]
 * }
 *
 *
 * @generated from message authorization.IdpPluginRequest
 */
export class IdpPluginRequest extends Message<IdpPluginRequest> {
  /**
   * @generated from field: repeated authorization.Entity entities = 1;
   */
  entities: Entity[] = [];

  constructor(data?: PartialMessage<IdpPluginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authorization.IdpPluginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entities", kind: "message", T: Entity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdpPluginRequest {
    return new IdpPluginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdpPluginRequest {
    return new IdpPluginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdpPluginRequest {
    return new IdpPluginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IdpPluginRequest | PlainMessage<IdpPluginRequest> | undefined, b: IdpPluginRequest | PlainMessage<IdpPluginRequest> | undefined): boolean {
    return proto3.util.equals(IdpPluginRequest, a, b);
  }
}

/**
 * @generated from message authorization.IdpEntityRepresentation
 */
export class IdpEntityRepresentation extends Message<IdpEntityRepresentation> {
  /**
   * @generated from field: repeated google.protobuf.Struct additional_props = 1;
   */
  additionalProps: Struct[] = [];

  /**
   * ephemeral entity id from the request
   *
   * @generated from field: string original_id = 2;
   */
  originalId = "";

  constructor(data?: PartialMessage<IdpEntityRepresentation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authorization.IdpEntityRepresentation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "additional_props", kind: "message", T: Struct, repeated: true },
    { no: 2, name: "original_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdpEntityRepresentation {
    return new IdpEntityRepresentation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdpEntityRepresentation {
    return new IdpEntityRepresentation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdpEntityRepresentation {
    return new IdpEntityRepresentation().fromJsonString(jsonString, options);
  }

  static equals(a: IdpEntityRepresentation | PlainMessage<IdpEntityRepresentation> | undefined, b: IdpEntityRepresentation | PlainMessage<IdpEntityRepresentation> | undefined): boolean {
    return proto3.util.equals(IdpEntityRepresentation, a, b);
  }
}

/**
 *
 * Example: Get idp attributes for bob and alice
 * {
 * "entity_representations": [
 * {
 * "idp_entity_id": "e1",
 * "additional_props": {"someAttr1":"someValue1"}
 * },
 * {
 * "idp_entity_id": "e2",
 * "additional_props": {"someAttr2":"someValue2"}
 * }
 * ]
 * }
 *
 *
 * @generated from message authorization.IdpPluginResponse
 */
export class IdpPluginResponse extends Message<IdpPluginResponse> {
  /**
   * @generated from field: repeated authorization.IdpEntityRepresentation entity_representations = 1;
   */
  entityRepresentations: IdpEntityRepresentation[] = [];

  constructor(data?: PartialMessage<IdpPluginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authorization.IdpPluginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_representations", kind: "message", T: IdpEntityRepresentation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdpPluginResponse {
    return new IdpPluginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdpPluginResponse {
    return new IdpPluginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdpPluginResponse {
    return new IdpPluginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IdpPluginResponse | PlainMessage<IdpPluginResponse> | undefined, b: IdpPluginResponse | PlainMessage<IdpPluginResponse> | undefined): boolean {
    return proto3.util.equals(IdpPluginResponse, a, b);
  }
}

/**
 * @generated from message authorization.EntityNotFoundError
 */
export class EntityNotFoundError extends Message<EntityNotFoundError> {
  /**
   * @generated from field: int32 code = 1;
   */
  code = 0;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: repeated google.protobuf.Any details = 3;
   */
  details: Any[] = [];

  /**
   * @generated from field: string entity = 4;
   */
  entity = "";

  constructor(data?: PartialMessage<EntityNotFoundError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authorization.EntityNotFoundError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "details", kind: "message", T: Any, repeated: true },
    { no: 4, name: "entity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityNotFoundError {
    return new EntityNotFoundError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityNotFoundError {
    return new EntityNotFoundError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityNotFoundError {
    return new EntityNotFoundError().fromJsonString(jsonString, options);
  }

  static equals(a: EntityNotFoundError | PlainMessage<EntityNotFoundError> | undefined, b: EntityNotFoundError | PlainMessage<EntityNotFoundError> | undefined): boolean {
    return proto3.util.equals(EntityNotFoundError, a, b);
  }
}

