// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file kas/kas.proto (package kas, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Value } from "@bufbuild/protobuf";

/**
 * Intentionally empty. May include features later.
 *
 * @generated from message kas.InfoRequest
 */
export class InfoRequest extends Message<InfoRequest> {
  constructor(data?: PartialMessage<InfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kas.InfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InfoRequest {
    return new InfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InfoRequest {
    return new InfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InfoRequest {
    return new InfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InfoRequest | PlainMessage<InfoRequest> | undefined, b: InfoRequest | PlainMessage<InfoRequest> | undefined): boolean {
    return proto3.util.equals(InfoRequest, a, b);
  }
}

/**
 * Service application level metadata
 *
 * @generated from message kas.InfoResponse
 */
export class InfoResponse extends Message<InfoResponse> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  constructor(data?: PartialMessage<InfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kas.InfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InfoResponse {
    return new InfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InfoResponse {
    return new InfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InfoResponse {
    return new InfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InfoResponse | PlainMessage<InfoResponse> | undefined, b: InfoResponse | PlainMessage<InfoResponse> | undefined): boolean {
    return proto3.util.equals(InfoResponse, a, b);
  }
}

/**
 * @generated from message kas.LegacyPublicKeyRequest
 */
export class LegacyPublicKeyRequest extends Message<LegacyPublicKeyRequest> {
  /**
   * @generated from field: string algorithm = 1;
   */
  algorithm = "";

  constructor(data?: PartialMessage<LegacyPublicKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kas.LegacyPublicKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "algorithm", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LegacyPublicKeyRequest {
    return new LegacyPublicKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LegacyPublicKeyRequest {
    return new LegacyPublicKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LegacyPublicKeyRequest {
    return new LegacyPublicKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LegacyPublicKeyRequest | PlainMessage<LegacyPublicKeyRequest> | undefined, b: LegacyPublicKeyRequest | PlainMessage<LegacyPublicKeyRequest> | undefined): boolean {
    return proto3.util.equals(LegacyPublicKeyRequest, a, b);
  }
}

/**
 * @generated from message kas.PublicKeyRequest
 */
export class PublicKeyRequest extends Message<PublicKeyRequest> {
  /**
   * @generated from field: string algorithm = 1;
   */
  algorithm = "";

  /**
   * @generated from field: string fmt = 2;
   */
  fmt = "";

  /**
   * @generated from field: string v = 3;
   */
  v = "";

  constructor(data?: PartialMessage<PublicKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kas.PublicKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "algorithm", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fmt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "v", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicKeyRequest {
    return new PublicKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicKeyRequest {
    return new PublicKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicKeyRequest {
    return new PublicKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublicKeyRequest | PlainMessage<PublicKeyRequest> | undefined, b: PublicKeyRequest | PlainMessage<PublicKeyRequest> | undefined): boolean {
    return proto3.util.equals(PublicKeyRequest, a, b);
  }
}

/**
 * @generated from message kas.PublicKeyResponse
 */
export class PublicKeyResponse extends Message<PublicKeyResponse> {
  /**
   * @generated from field: string public_key = 1;
   */
  publicKey = "";

  constructor(data?: PartialMessage<PublicKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kas.PublicKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicKeyResponse {
    return new PublicKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicKeyResponse {
    return new PublicKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicKeyResponse {
    return new PublicKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublicKeyResponse | PlainMessage<PublicKeyResponse> | undefined, b: PublicKeyResponse | PlainMessage<PublicKeyResponse> | undefined): boolean {
    return proto3.util.equals(PublicKeyResponse, a, b);
  }
}

/**
 * @generated from message kas.RewrapRequest
 */
export class RewrapRequest extends Message<RewrapRequest> {
  /**
   * @generated from field: string signed_request_token = 1;
   */
  signedRequestToken = "";

  constructor(data?: PartialMessage<RewrapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kas.RewrapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signed_request_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewrapRequest {
    return new RewrapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewrapRequest {
    return new RewrapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewrapRequest {
    return new RewrapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RewrapRequest | PlainMessage<RewrapRequest> | undefined, b: RewrapRequest | PlainMessage<RewrapRequest> | undefined): boolean {
    return proto3.util.equals(RewrapRequest, a, b);
  }
}

/**
 * @generated from message kas.RewrapResponse
 */
export class RewrapResponse extends Message<RewrapResponse> {
  /**
   * @generated from field: map<string, google.protobuf.Value> metadata = 1;
   */
  metadata: { [key: string]: Value } = {};

  /**
   * @generated from field: bytes entity_wrapped_key = 2;
   */
  entityWrappedKey = new Uint8Array(0);

  /**
   * @generated from field: string session_public_key = 3;
   */
  sessionPublicKey = "";

  /**
   * @generated from field: string schema_version = 4;
   */
  schemaVersion = "";

  constructor(data?: PartialMessage<RewrapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kas.RewrapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 2, name: "entity_wrapped_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "session_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schema_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewrapResponse {
    return new RewrapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewrapResponse {
    return new RewrapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewrapResponse {
    return new RewrapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RewrapResponse | PlainMessage<RewrapResponse> | undefined, b: RewrapResponse | PlainMessage<RewrapResponse> | undefined): boolean {
    return proto3.util.equals(RewrapResponse, a, b);
  }
}

