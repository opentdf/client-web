/**
 * @fileoverview gRPC-Web generated client stub for kas
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: kas/kas.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from 'grpc-web';

import * as google_protobuf_wrappers_pb from 'google-protobuf/google/protobuf/wrappers_pb'; // proto import: "google/protobuf/wrappers.proto"
import * as kas_kas_pb from '../kas/kas_pb'; // proto import: "kas/kas.proto"

export class AccessServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any }
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorInfo = new grpcWeb.MethodDescriptor(
    '/kas.AccessService/Info',
    grpcWeb.MethodType.UNARY,
    kas_kas_pb.InfoRequest,
    kas_kas_pb.InfoResponse,
    (request: kas_kas_pb.InfoRequest) => {
      return request.serializeBinary();
    },
    kas_kas_pb.InfoResponse.deserializeBinary
  );

  info(
    request: kas_kas_pb.InfoRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<kas_kas_pb.InfoResponse>;

  info(
    request: kas_kas_pb.InfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: kas_kas_pb.InfoResponse) => void
  ): grpcWeb.ClientReadableStream<kas_kas_pb.InfoResponse>;

  info(
    request: kas_kas_pb.InfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: kas_kas_pb.InfoResponse) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/kas.AccessService/Info',
        request,
        metadata || {},
        this.methodDescriptorInfo,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/kas.AccessService/Info',
      request,
      metadata || {},
      this.methodDescriptorInfo
    );
  }

  methodDescriptorPublicKey = new grpcWeb.MethodDescriptor(
    '/kas.AccessService/PublicKey',
    grpcWeb.MethodType.UNARY,
    kas_kas_pb.PublicKeyRequest,
    kas_kas_pb.PublicKeyResponse,
    (request: kas_kas_pb.PublicKeyRequest) => {
      return request.serializeBinary();
    },
    kas_kas_pb.PublicKeyResponse.deserializeBinary
  );

  publicKey(
    request: kas_kas_pb.PublicKeyRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<kas_kas_pb.PublicKeyResponse>;

  publicKey(
    request: kas_kas_pb.PublicKeyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: kas_kas_pb.PublicKeyResponse) => void
  ): grpcWeb.ClientReadableStream<kas_kas_pb.PublicKeyResponse>;

  publicKey(
    request: kas_kas_pb.PublicKeyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: kas_kas_pb.PublicKeyResponse) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/kas.AccessService/PublicKey',
        request,
        metadata || {},
        this.methodDescriptorPublicKey,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/kas.AccessService/PublicKey',
      request,
      metadata || {},
      this.methodDescriptorPublicKey
    );
  }

  methodDescriptorLegacyPublicKey = new grpcWeb.MethodDescriptor(
    '/kas.AccessService/LegacyPublicKey',
    grpcWeb.MethodType.UNARY,
    kas_kas_pb.LegacyPublicKeyRequest,
    google_protobuf_wrappers_pb.StringValue,
    (request: kas_kas_pb.LegacyPublicKeyRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_wrappers_pb.StringValue.deserializeBinary
  );

  legacyPublicKey(
    request: kas_kas_pb.LegacyPublicKeyRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<google_protobuf_wrappers_pb.StringValue>;

  legacyPublicKey(
    request: kas_kas_pb.LegacyPublicKeyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: google_protobuf_wrappers_pb.StringValue) => void
  ): grpcWeb.ClientReadableStream<google_protobuf_wrappers_pb.StringValue>;

  legacyPublicKey(
    request: kas_kas_pb.LegacyPublicKeyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: google_protobuf_wrappers_pb.StringValue) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/kas.AccessService/LegacyPublicKey',
        request,
        metadata || {},
        this.methodDescriptorLegacyPublicKey,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/kas.AccessService/LegacyPublicKey',
      request,
      metadata || {},
      this.methodDescriptorLegacyPublicKey
    );
  }

  methodDescriptorRewrap = new grpcWeb.MethodDescriptor(
    '/kas.AccessService/Rewrap',
    grpcWeb.MethodType.UNARY,
    kas_kas_pb.RewrapRequest,
    kas_kas_pb.RewrapResponse,
    (request: kas_kas_pb.RewrapRequest) => {
      return request.serializeBinary();
    },
    kas_kas_pb.RewrapResponse.deserializeBinary
  );

  rewrap(
    request: kas_kas_pb.RewrapRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<kas_kas_pb.RewrapResponse>;

  rewrap(
    request: kas_kas_pb.RewrapRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: kas_kas_pb.RewrapResponse) => void
  ): grpcWeb.ClientReadableStream<kas_kas_pb.RewrapResponse>;

  rewrap(
    request: kas_kas_pb.RewrapRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: kas_kas_pb.RewrapResponse) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/kas.AccessService/Rewrap',
        request,
        metadata || {},
        this.methodDescriptorRewrap,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/kas.AccessService/Rewrap',
      request,
      metadata || {},
      this.methodDescriptorRewrap
    );
  }
}
