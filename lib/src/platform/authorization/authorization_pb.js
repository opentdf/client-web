// @generated by protoc-gen-es v1.9.0 with parameter "target=js+dts,import_extension=none"
// @generated from file authorization/authorization.proto (package authorization, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, proto3 } from "@bufbuild/protobuf";
import { Action } from "../policy/objects_pb";

/**
 * @generated from message authorization.Token
 */
export const Token = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.Token",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "jwt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * PE (Person Entity) or NPE (Non-Person Entity)
 *
 * @generated from message authorization.Entity
 */
export const Entity = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.Entity",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email_address", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "entity_type" },
    { no: 3, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "entity_type" },
    { no: 4, name: "remote_claims_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "entity_type" },
    { no: 5, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "entity_type" },
    { no: 6, name: "claims", kind: "message", T: Any, oneof: "entity_type" },
    { no: 7, name: "custom", kind: "message", T: EntityCustom, oneof: "entity_type" },
    { no: 8, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "entity_type" },
  ],
);

/**
 * Entity type for custom entities beyond the standard types
 *
 * @generated from message authorization.EntityCustom
 */
export const EntityCustom = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.EntityCustom",
  () => [
    { no: 1, name: "extension", kind: "message", T: Any },
  ],
);

/**
 * A set of related PE and NPE
 *
 * @generated from message authorization.EntityChain
 */
export const EntityChain = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.EntityChain",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entities", kind: "message", T: Entity, repeated: true },
  ],
);

/**
 *
 * Example Request Get Decisions to answer the question -  Do Bob (represented by entity chain ec1)
 * and Alice (represented by entity chain ec2) have TRANSMIT authorization for
 * 2 resources; resource1 (attr-set-1) defined by attributes foo:bar  resource2 (attr-set-2) defined by attribute foo:bar, color:red ?
 *
 * {
 * "actions": [
 * {
 * "standard": "STANDARD_ACTION_TRANSMIT"
 * }
 * ],
 * "entityChains": [
 * {
 * "id": "ec1",
 * "entities": [
 * {
 * "emailAddress": "bob@example.org"
 * }
 * ]
 * },
 * {
 * "id": "ec2",
 * "entities": [
 * {
 * "userName": "alice@example.org"
 * }
 * ]
 * }
 * ],
 * "resourceAttributes": [
 * {
 * "resourceAttributeId":  "attr-set-1",
 * "attributeFqns": [
 * "https://www.example.org/attr/foo/value/value1"
 * ]
 * },
 * {
 * "resourceAttributeId":  "attr-set-2",
 * "attributeFqns": [
 * "https://example.net/attr/attr1/value/value1",
 * "https://example.net/attr/attr1/value/value2"
 * ]
 * }
 * ]
 * }
 *
 *
 * @generated from message authorization.DecisionRequest
 */
export const DecisionRequest = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.DecisionRequest",
  () => [
    { no: 1, name: "actions", kind: "message", T: Action, repeated: true },
    { no: 2, name: "entity_chains", kind: "message", T: EntityChain, repeated: true },
    { no: 3, name: "resource_attributes", kind: "message", T: ResourceAttribute, repeated: true },
  ],
);

/**
 *
 *
 * Example response for a Decision Request -  Do Bob (represented by entity chain ec1)
 * and Alice (represented by entity chain ec2) have TRANSMIT authorization for
 * 2 resources; resource1 (attr-set-1) defined by attributes foo:bar  resource2 (attr-set-2) defined by attribute foo:bar, color:red ?
 *
 * Results:
 * - bob has permitted authorization to transmit for a resource defined by attr-set-1 attributes and has a watermark obligation
 * - bob has denied authorization to transmit a for a resource defined by attr-set-2 attributes
 * - alice has permitted authorization to transmit for a resource defined by attr-set-1 attributes
 * - alice has denied authorization to transmit a for a resource defined by attr-set-2 attributes
 *
 * {
 * "entityChainId":  "ec1",
 * "resourceAttributesId":  "attr-set-1",
 * "decision":  "DECISION_PERMIT",
 * "obligations":  [
 * "http://www.example.org/obligation/watermark"
 * ]
 * },
 * {
 * "entityChainId":  "ec1",
 * "resourceAttributesId":  "attr-set-2",
 * "decision":  "DECISION_PERMIT"
 * },
 * {
 * "entityChainId":  "ec2",
 * "resourceAttributesId":  "attr-set-1",
 * "decision":  "DECISION_PERMIT"
 * },
 * {
 * "entityChainId":  "ec2",
 * "resourceAttributesId":  "attr-set-2",
 * "decision":  "DECISION_DENY"
 * }
 *
 *
 *
 * @generated from message authorization.DecisionResponse
 */
export const DecisionResponse = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.DecisionResponse",
  () => [
    { no: 1, name: "entity_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_attributes_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "action", kind: "message", T: Action },
    { no: 4, name: "decision", kind: "enum", T: proto3.getEnumType(DecisionResponse_Decision) },
    { no: 5, name: "obligations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from enum authorization.DecisionResponse.Decision
 */
export const DecisionResponse_Decision = /*@__PURE__*/ proto3.makeEnum(
  "authorization.DecisionResponse.Decision",
  [
    {no: 0, name: "DECISION_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "DECISION_DENY", localName: "DENY"},
    {no: 2, name: "DECISION_PERMIT", localName: "PERMIT"},
  ],
);

/**
 * @generated from message authorization.GetDecisionsRequest
 */
export const GetDecisionsRequest = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.GetDecisionsRequest",
  () => [
    { no: 1, name: "decision_requests", kind: "message", T: DecisionRequest, repeated: true },
  ],
);

/**
 * @generated from message authorization.GetDecisionsResponse
 */
export const GetDecisionsResponse = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.GetDecisionsResponse",
  () => [
    { no: 1, name: "decision_responses", kind: "message", T: DecisionResponse, repeated: true },
  ],
);

/**
 *
 * Request to get entitlements for one or more entities for an optional attribute scope
 *
 * Example: Get entitlements for bob and alice (both represented using an email address
 *
 * {
 * "entities": [
 * {
 * "id": "e1",
 * "emailAddress": "bob@example.org"
 * },
 * {
 * "id": "e2",
 * "emailAddress": "alice@example.org"
 * }
 * ],
 * "scope": {
 * "attributeFqns": [
 * "https://example.net/attr/attr1/value/value1",
 * "https://example.net/attr/attr1/value/value2"
 * ]
 * }
 * }
 *
 *
 * @generated from message authorization.GetEntitlementsRequest
 */
export const GetEntitlementsRequest = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.GetEntitlementsRequest",
  () => [
    { no: 1, name: "entities", kind: "message", T: Entity, repeated: true },
    { no: 2, name: "scope", kind: "message", T: ResourceAttribute, opt: true },
  ],
);

/**
 * @generated from message authorization.EntityEntitlements
 */
export const EntityEntitlements = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.EntityEntitlements",
  () => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attribute_value_fqns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * A logical bucket of attributes belonging to a "Resource"
 *
 * @generated from message authorization.ResourceAttribute
 */
export const ResourceAttribute = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.ResourceAttribute",
  () => [
    { no: 1, name: "resource_attributes_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attribute_value_fqns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 *
 *
 * Example Response for a request of : Get entitlements for bob and alice (both represented using an email address
 *
 * {
 * "entitlements":  [
 * {
 * "entityId":  "e1",
 * "attributeValueReferences":  [
 * {
 * "attributeFqn":  "http://www.example.org/attr/foo/value/bar"
 * }
 * ]
 * },
 * {
 * "entityId":  "e2",
 * "attributeValueReferences":  [
 * {
 * "attributeFqn":  "http://www.example.org/attr/color/value/red"
 * }
 * ]
 * }
 * ]
 * }
 *
 *
 *
 * @generated from message authorization.GetEntitlementsResponse
 */
export const GetEntitlementsResponse = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.GetEntitlementsResponse",
  () => [
    { no: 1, name: "entitlements", kind: "message", T: EntityEntitlements, repeated: true },
  ],
);

/**
 *
 * Example Request Get Decisions by Token to answer the question -  Do Bob and client1 (represented by token tok1)
 * and Alice and client2 (represented by token tok2) have TRANSMIT authorization for
 * 2 resources; resource1 (attr-set-1) defined by attributes foo:bar  resource2 (attr-set-2) defined by attribute foo:bar, color:red ?
 *
 * {
 * "actions": [
 * {
 * "standard": "STANDARD_ACTION_TRANSMIT"
 * }
 * ],
 * "tokens": [
 * {
 * "id": "tok1",
 * "jwt": ....
 * },
 * {
 * "id": "tok2",
 * "jwt": .....
 * }
 * ],
 * "resourceAttributes": [
 * {
 * "attributeFqns": [
 * "https://www.example.org/attr/foo/value/value1"
 * ]
 * },
 * {
 * "attributeFqns": [
 * "https://example.net/attr/attr1/value/value1",
 * "https://example.net/attr/attr1/value/value2"
 * ]
 * }
 * ]
 * }
 *
 *
 * @generated from message authorization.TokenDecisionRequest
 */
export const TokenDecisionRequest = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.TokenDecisionRequest",
  () => [
    { no: 1, name: "actions", kind: "message", T: Action, repeated: true },
    { no: 2, name: "tokens", kind: "message", T: Token, repeated: true },
    { no: 3, name: "resource_attributes", kind: "message", T: ResourceAttribute, repeated: true },
  ],
);

/**
 * @generated from message authorization.GetDecisionsByTokenRequest
 */
export const GetDecisionsByTokenRequest = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.GetDecisionsByTokenRequest",
  () => [
    { no: 1, name: "decision_requests", kind: "message", T: TokenDecisionRequest, repeated: true },
  ],
);

/**
 * @generated from message authorization.GetDecisionsByTokenResponse
 */
export const GetDecisionsByTokenResponse = /*@__PURE__*/ proto3.makeMessageType(
  "authorization.GetDecisionsByTokenResponse",
  () => [
    { no: 1, name: "decision_responses", kind: "message", T: DecisionResponse, repeated: true },
  ],
);

