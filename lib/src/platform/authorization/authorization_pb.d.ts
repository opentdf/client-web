// @generated by protoc-gen-es v1.9.0 with parameter "target=js+dts,import_extension=none"
// @generated from file authorization/authorization.proto (package authorization, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { Any, BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Action } from "../policy/objects_pb";

/**
 * @generated from message authorization.Token
 */
export declare class Token extends Message<Token> {
  /**
   * ephemeral id for tracking between request and response
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * the token
   *
   * @generated from field: string jwt = 2;
   */
  jwt: string;

  constructor(data?: PartialMessage<Token>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.Token";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Token;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Token;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Token;

  static equals(a: Token | PlainMessage<Token> | undefined, b: Token | PlainMessage<Token> | undefined): boolean;
}

/**
 * PE (Person Entity) or NPE (Non-Person Entity)
 *
 * @generated from message authorization.Entity
 */
export declare class Entity extends Message<Entity> {
  /**
   * ephemeral id for tracking between request and response
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Standard entity types supported by the platform
   *
   * @generated from oneof authorization.Entity.entity_type
   */
  entityType: {
    /**
     * @generated from field: string email_address = 2;
     */
    value: string;
    case: "emailAddress";
  } | {
    /**
     * @generated from field: string user_name = 3;
     */
    value: string;
    case: "userName";
  } | {
    /**
     * @generated from field: string remote_claims_url = 4;
     */
    value: string;
    case: "remoteClaimsUrl";
  } | {
    /**
     * @generated from field: string uuid = 5;
     */
    value: string;
    case: "uuid";
  } | {
    /**
     * @generated from field: google.protobuf.Any claims = 6;
     */
    value: Any;
    case: "claims";
  } | {
    /**
     * @generated from field: authorization.EntityCustom custom = 7;
     */
    value: EntityCustom;
    case: "custom";
  } | {
    /**
     * @generated from field: string client_id = 8;
     */
    value: string;
    case: "clientId";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Entity>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.Entity";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entity;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entity;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entity;

  static equals(a: Entity | PlainMessage<Entity> | undefined, b: Entity | PlainMessage<Entity> | undefined): boolean;
}

/**
 * Entity type for custom entities beyond the standard types
 *
 * @generated from message authorization.EntityCustom
 */
export declare class EntityCustom extends Message<EntityCustom> {
  /**
   * @generated from field: google.protobuf.Any extension = 1;
   */
  extension?: Any;

  constructor(data?: PartialMessage<EntityCustom>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.EntityCustom";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityCustom;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityCustom;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityCustom;

  static equals(a: EntityCustom | PlainMessage<EntityCustom> | undefined, b: EntityCustom | PlainMessage<EntityCustom> | undefined): boolean;
}

/**
 * A set of related PE and NPE
 *
 * @generated from message authorization.EntityChain
 */
export declare class EntityChain extends Message<EntityChain> {
  /**
   * ephemeral id for tracking between request and response
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: repeated authorization.Entity entities = 2;
   */
  entities: Entity[];

  constructor(data?: PartialMessage<EntityChain>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.EntityChain";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityChain;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityChain;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityChain;

  static equals(a: EntityChain | PlainMessage<EntityChain> | undefined, b: EntityChain | PlainMessage<EntityChain> | undefined): boolean;
}

/**
 *
 * Example Request Get Decisions to answer the question -  Do Bob (represented by entity chain ec1)
 * and Alice (represented by entity chain ec2) have TRANSMIT authorization for
 * 2 resources; resource1 (attr-set-1) defined by attributes foo:bar  resource2 (attr-set-2) defined by attribute foo:bar, color:red ?
 *
 * {
 * "actions": [
 * {
 * "standard": "STANDARD_ACTION_TRANSMIT"
 * }
 * ],
 * "entityChains": [
 * {
 * "id": "ec1",
 * "entities": [
 * {
 * "emailAddress": "bob@example.org"
 * }
 * ]
 * },
 * {
 * "id": "ec2",
 * "entities": [
 * {
 * "userName": "alice@example.org"
 * }
 * ]
 * }
 * ],
 * "resourceAttributes": [
 * {
 * "resourceAttributeId":  "attr-set-1",
 * "attributeFqns": [
 * "https://www.example.org/attr/foo/value/value1"
 * ]
 * },
 * {
 * "resourceAttributeId":  "attr-set-2",
 * "attributeFqns": [
 * "https://example.net/attr/attr1/value/value1",
 * "https://example.net/attr/attr1/value/value2"
 * ]
 * }
 * ]
 * }
 *
 *
 * @generated from message authorization.DecisionRequest
 */
export declare class DecisionRequest extends Message<DecisionRequest> {
  /**
   * @generated from field: repeated policy.Action actions = 1;
   */
  actions: Action[];

  /**
   * @generated from field: repeated authorization.EntityChain entity_chains = 2;
   */
  entityChains: EntityChain[];

  /**
   * @generated from field: repeated authorization.ResourceAttribute resource_attributes = 3;
   */
  resourceAttributes: ResourceAttribute[];

  constructor(data?: PartialMessage<DecisionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.DecisionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecisionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecisionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecisionRequest;

  static equals(a: DecisionRequest | PlainMessage<DecisionRequest> | undefined, b: DecisionRequest | PlainMessage<DecisionRequest> | undefined): boolean;
}

/**
 *
 *
 * Example response for a Decision Request -  Do Bob (represented by entity chain ec1)
 * and Alice (represented by entity chain ec2) have TRANSMIT authorization for
 * 2 resources; resource1 (attr-set-1) defined by attributes foo:bar  resource2 (attr-set-2) defined by attribute foo:bar, color:red ?
 *
 * Results:
 * - bob has permitted authorization to transmit for a resource defined by attr-set-1 attributes and has a watermark obligation
 * - bob has denied authorization to transmit a for a resource defined by attr-set-2 attributes
 * - alice has permitted authorization to transmit for a resource defined by attr-set-1 attributes
 * - alice has denied authorization to transmit a for a resource defined by attr-set-2 attributes
 *
 * {
 * "entityChainId":  "ec1",
 * "resourceAttributesId":  "attr-set-1",
 * "decision":  "DECISION_PERMIT",
 * "obligations":  [
 * "http://www.example.org/obligation/watermark"
 * ]
 * },
 * {
 * "entityChainId":  "ec1",
 * "resourceAttributesId":  "attr-set-2",
 * "decision":  "DECISION_PERMIT"
 * },
 * {
 * "entityChainId":  "ec2",
 * "resourceAttributesId":  "attr-set-1",
 * "decision":  "DECISION_PERMIT"
 * },
 * {
 * "entityChainId":  "ec2",
 * "resourceAttributesId":  "attr-set-2",
 * "decision":  "DECISION_DENY"
 * }
 *
 *
 *
 * @generated from message authorization.DecisionResponse
 */
export declare class DecisionResponse extends Message<DecisionResponse> {
  /**
   * ephemeral entity chain id from the request
   *
   * @generated from field: string entity_chain_id = 1;
   */
  entityChainId: string;

  /**
   * ephemeral resource attributes id from the request
   *
   * @generated from field: string resource_attributes_id = 2;
   */
  resourceAttributesId: string;

  /**
   * Action of the decision response
   *
   * @generated from field: policy.Action action = 3;
   */
  action?: Action;

  /**
   * The decision response
   *
   * @generated from field: authorization.DecisionResponse.Decision decision = 4;
   */
  decision: DecisionResponse_Decision;

  /**
   * optional list of obligations represented in URI format
   *
   * @generated from field: repeated string obligations = 5;
   */
  obligations: string[];

  constructor(data?: PartialMessage<DecisionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.DecisionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecisionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecisionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecisionResponse;

  static equals(a: DecisionResponse | PlainMessage<DecisionResponse> | undefined, b: DecisionResponse | PlainMessage<DecisionResponse> | undefined): boolean;
}

/**
 * @generated from enum authorization.DecisionResponse.Decision
 */
export declare enum DecisionResponse_Decision {
  /**
   * @generated from enum value: DECISION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DECISION_DENY = 1;
   */
  DENY = 1,

  /**
   * @generated from enum value: DECISION_PERMIT = 2;
   */
  PERMIT = 2,
}

/**
 * @generated from message authorization.GetDecisionsRequest
 */
export declare class GetDecisionsRequest extends Message<GetDecisionsRequest> {
  /**
   * @generated from field: repeated authorization.DecisionRequest decision_requests = 1;
   */
  decisionRequests: DecisionRequest[];

  constructor(data?: PartialMessage<GetDecisionsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.GetDecisionsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDecisionsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDecisionsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDecisionsRequest;

  static equals(a: GetDecisionsRequest | PlainMessage<GetDecisionsRequest> | undefined, b: GetDecisionsRequest | PlainMessage<GetDecisionsRequest> | undefined): boolean;
}

/**
 * @generated from message authorization.GetDecisionsResponse
 */
export declare class GetDecisionsResponse extends Message<GetDecisionsResponse> {
  /**
   * @generated from field: repeated authorization.DecisionResponse decision_responses = 1;
   */
  decisionResponses: DecisionResponse[];

  constructor(data?: PartialMessage<GetDecisionsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.GetDecisionsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDecisionsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDecisionsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDecisionsResponse;

  static equals(a: GetDecisionsResponse | PlainMessage<GetDecisionsResponse> | undefined, b: GetDecisionsResponse | PlainMessage<GetDecisionsResponse> | undefined): boolean;
}

/**
 *
 * Request to get entitlements for one or more entities for an optional attribute scope
 *
 * Example: Get entitlements for bob and alice (both represented using an email address
 *
 * {
 * "entities": [
 * {
 * "id": "e1",
 * "emailAddress": "bob@example.org"
 * },
 * {
 * "id": "e2",
 * "emailAddress": "alice@example.org"
 * }
 * ],
 * "scope": {
 * "attributeFqns": [
 * "https://example.net/attr/attr1/value/value1",
 * "https://example.net/attr/attr1/value/value2"
 * ]
 * }
 * }
 *
 *
 * @generated from message authorization.GetEntitlementsRequest
 */
export declare class GetEntitlementsRequest extends Message<GetEntitlementsRequest> {
  /**
   * list of requested entities
   *
   * @generated from field: repeated authorization.Entity entities = 1;
   */
  entities: Entity[];

  /**
   * optional attribute fqn as a scope
   *
   * @generated from field: optional authorization.ResourceAttribute scope = 2;
   */
  scope?: ResourceAttribute;

  constructor(data?: PartialMessage<GetEntitlementsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.GetEntitlementsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEntitlementsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEntitlementsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEntitlementsRequest;

  static equals(a: GetEntitlementsRequest | PlainMessage<GetEntitlementsRequest> | undefined, b: GetEntitlementsRequest | PlainMessage<GetEntitlementsRequest> | undefined): boolean;
}

/**
 * @generated from message authorization.EntityEntitlements
 */
export declare class EntityEntitlements extends Message<EntityEntitlements> {
  /**
   * @generated from field: string entity_id = 1;
   */
  entityId: string;

  /**
   * @generated from field: repeated string attribute_value_fqns = 2;
   */
  attributeValueFqns: string[];

  constructor(data?: PartialMessage<EntityEntitlements>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.EntityEntitlements";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityEntitlements;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityEntitlements;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityEntitlements;

  static equals(a: EntityEntitlements | PlainMessage<EntityEntitlements> | undefined, b: EntityEntitlements | PlainMessage<EntityEntitlements> | undefined): boolean;
}

/**
 * A logical bucket of attributes belonging to a "Resource"
 *
 * @generated from message authorization.ResourceAttribute
 */
export declare class ResourceAttribute extends Message<ResourceAttribute> {
  /**
   * @generated from field: string resource_attributes_id = 1;
   */
  resourceAttributesId: string;

  /**
   * @generated from field: repeated string attribute_value_fqns = 2;
   */
  attributeValueFqns: string[];

  constructor(data?: PartialMessage<ResourceAttribute>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.ResourceAttribute";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceAttribute;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceAttribute;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceAttribute;

  static equals(a: ResourceAttribute | PlainMessage<ResourceAttribute> | undefined, b: ResourceAttribute | PlainMessage<ResourceAttribute> | undefined): boolean;
}

/**
 *
 *
 * Example Response for a request of : Get entitlements for bob and alice (both represented using an email address
 *
 * {
 * "entitlements":  [
 * {
 * "entityId":  "e1",
 * "attributeValueReferences":  [
 * {
 * "attributeFqn":  "http://www.example.org/attr/foo/value/bar"
 * }
 * ]
 * },
 * {
 * "entityId":  "e2",
 * "attributeValueReferences":  [
 * {
 * "attributeFqn":  "http://www.example.org/attr/color/value/red"
 * }
 * ]
 * }
 * ]
 * }
 *
 *
 *
 * @generated from message authorization.GetEntitlementsResponse
 */
export declare class GetEntitlementsResponse extends Message<GetEntitlementsResponse> {
  /**
   * @generated from field: repeated authorization.EntityEntitlements entitlements = 1;
   */
  entitlements: EntityEntitlements[];

  constructor(data?: PartialMessage<GetEntitlementsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.GetEntitlementsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEntitlementsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEntitlementsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEntitlementsResponse;

  static equals(a: GetEntitlementsResponse | PlainMessage<GetEntitlementsResponse> | undefined, b: GetEntitlementsResponse | PlainMessage<GetEntitlementsResponse> | undefined): boolean;
}

/**
 *
 * Example Request Get Decisions by Token to answer the question -  Do Bob and client1 (represented by token tok1)
 * and Alice and client2 (represented by token tok2) have TRANSMIT authorization for
 * 2 resources; resource1 (attr-set-1) defined by attributes foo:bar  resource2 (attr-set-2) defined by attribute foo:bar, color:red ?
 *
 * {
 * "actions": [
 * {
 * "standard": "STANDARD_ACTION_TRANSMIT"
 * }
 * ],
 * "tokens": [
 * {
 * "id": "tok1",
 * "jwt": ....
 * },
 * {
 * "id": "tok2",
 * "jwt": .....
 * }
 * ],
 * "resourceAttributes": [
 * {
 * "attributeFqns": [
 * "https://www.example.org/attr/foo/value/value1"
 * ]
 * },
 * {
 * "attributeFqns": [
 * "https://example.net/attr/attr1/value/value1",
 * "https://example.net/attr/attr1/value/value2"
 * ]
 * }
 * ]
 * }
 *
 *
 * @generated from message authorization.TokenDecisionRequest
 */
export declare class TokenDecisionRequest extends Message<TokenDecisionRequest> {
  /**
   * @generated from field: repeated policy.Action actions = 1;
   */
  actions: Action[];

  /**
   * @generated from field: repeated authorization.Token tokens = 2;
   */
  tokens: Token[];

  /**
   * @generated from field: repeated authorization.ResourceAttribute resource_attributes = 3;
   */
  resourceAttributes: ResourceAttribute[];

  constructor(data?: PartialMessage<TokenDecisionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.TokenDecisionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenDecisionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenDecisionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenDecisionRequest;

  static equals(a: TokenDecisionRequest | PlainMessage<TokenDecisionRequest> | undefined, b: TokenDecisionRequest | PlainMessage<TokenDecisionRequest> | undefined): boolean;
}

/**
 * @generated from message authorization.GetDecisionsByTokenRequest
 */
export declare class GetDecisionsByTokenRequest extends Message<GetDecisionsByTokenRequest> {
  /**
   * @generated from field: repeated authorization.TokenDecisionRequest decision_requests = 1;
   */
  decisionRequests: TokenDecisionRequest[];

  constructor(data?: PartialMessage<GetDecisionsByTokenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.GetDecisionsByTokenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDecisionsByTokenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDecisionsByTokenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDecisionsByTokenRequest;

  static equals(a: GetDecisionsByTokenRequest | PlainMessage<GetDecisionsByTokenRequest> | undefined, b: GetDecisionsByTokenRequest | PlainMessage<GetDecisionsByTokenRequest> | undefined): boolean;
}

/**
 * @generated from message authorization.GetDecisionsByTokenResponse
 */
export declare class GetDecisionsByTokenResponse extends Message<GetDecisionsByTokenResponse> {
  /**
   * @generated from field: repeated authorization.DecisionResponse decision_responses = 1;
   */
  decisionResponses: DecisionResponse[];

  constructor(data?: PartialMessage<GetDecisionsByTokenResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "authorization.GetDecisionsByTokenResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDecisionsByTokenResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDecisionsByTokenResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDecisionsByTokenResponse;

  static equals(a: GetDecisionsByTokenResponse | PlainMessage<GetDecisionsByTokenResponse> | undefined, b: GetDecisionsByTokenResponse | PlainMessage<GetDecisionsByTokenResponse> | undefined): boolean;
}

