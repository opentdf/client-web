/**
 * @fileoverview gRPC-Web generated client stub for authorization
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: authorization/authorization.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from 'grpc-web';

import * as authorization_authorization_pb from '../authorization/authorization_pb'; // proto import: "authorization/authorization.proto"

export class AuthorizationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any }
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetDecisions = new grpcWeb.MethodDescriptor(
    '/authorization.AuthorizationService/GetDecisions',
    grpcWeb.MethodType.UNARY,
    authorization_authorization_pb.GetDecisionsRequest,
    authorization_authorization_pb.GetDecisionsResponse,
    (request: authorization_authorization_pb.GetDecisionsRequest) => {
      return request.serializeBinary();
    },
    authorization_authorization_pb.GetDecisionsResponse.deserializeBinary
  );

  getDecisions(
    request: authorization_authorization_pb.GetDecisionsRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<authorization_authorization_pb.GetDecisionsResponse>;

  getDecisions(
    request: authorization_authorization_pb.GetDecisionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: authorization_authorization_pb.GetDecisionsResponse
    ) => void
  ): grpcWeb.ClientReadableStream<authorization_authorization_pb.GetDecisionsResponse>;

  getDecisions(
    request: authorization_authorization_pb.GetDecisionsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: authorization_authorization_pb.GetDecisionsResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/authorization.AuthorizationService/GetDecisions',
        request,
        metadata || {},
        this.methodDescriptorGetDecisions,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/authorization.AuthorizationService/GetDecisions',
      request,
      metadata || {},
      this.methodDescriptorGetDecisions
    );
  }

  methodDescriptorGetEntitlements = new grpcWeb.MethodDescriptor(
    '/authorization.AuthorizationService/GetEntitlements',
    grpcWeb.MethodType.UNARY,
    authorization_authorization_pb.GetEntitlementsRequest,
    authorization_authorization_pb.GetEntitlementsResponse,
    (request: authorization_authorization_pb.GetEntitlementsRequest) => {
      return request.serializeBinary();
    },
    authorization_authorization_pb.GetEntitlementsResponse.deserializeBinary
  );

  getEntitlements(
    request: authorization_authorization_pb.GetEntitlementsRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<authorization_authorization_pb.GetEntitlementsResponse>;

  getEntitlements(
    request: authorization_authorization_pb.GetEntitlementsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: authorization_authorization_pb.GetEntitlementsResponse
    ) => void
  ): grpcWeb.ClientReadableStream<authorization_authorization_pb.GetEntitlementsResponse>;

  getEntitlements(
    request: authorization_authorization_pb.GetEntitlementsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: authorization_authorization_pb.GetEntitlementsResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/authorization.AuthorizationService/GetEntitlements',
        request,
        metadata || {},
        this.methodDescriptorGetEntitlements,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/authorization.AuthorizationService/GetEntitlements',
      request,
      metadata || {},
      this.methodDescriptorGetEntitlements
    );
  }
}
