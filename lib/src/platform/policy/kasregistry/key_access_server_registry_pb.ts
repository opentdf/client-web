// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file policy/kasregistry/key_access_server_registry.proto (package policy.kasregistry, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { KeyAccessServer, PublicKey } from '../objects_pb.js';
import { MetadataMutable, MetadataUpdateEnum } from '../../common/common_pb.js';

/**
 * @generated from message policy.kasregistry.GetKeyAccessServerRequest
 */
export class GetKeyAccessServerRequest extends Message<GetKeyAccessServerRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<GetKeyAccessServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.kasregistry.GetKeyAccessServerRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetKeyAccessServerRequest {
    return new GetKeyAccessServerRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetKeyAccessServerRequest {
    return new GetKeyAccessServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetKeyAccessServerRequest {
    return new GetKeyAccessServerRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetKeyAccessServerRequest | PlainMessage<GetKeyAccessServerRequest> | undefined,
    b: GetKeyAccessServerRequest | PlainMessage<GetKeyAccessServerRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetKeyAccessServerRequest, a, b);
  }
}

/**
 * @generated from message policy.kasregistry.GetKeyAccessServerResponse
 */
export class GetKeyAccessServerResponse extends Message<GetKeyAccessServerResponse> {
  /**
   * @generated from field: policy.KeyAccessServer key_access_server = 1;
   */
  keyAccessServer?: KeyAccessServer;

  constructor(data?: PartialMessage<GetKeyAccessServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.kasregistry.GetKeyAccessServerResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'key_access_server', kind: 'message', T: KeyAccessServer },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetKeyAccessServerResponse {
    return new GetKeyAccessServerResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetKeyAccessServerResponse {
    return new GetKeyAccessServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetKeyAccessServerResponse {
    return new GetKeyAccessServerResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetKeyAccessServerResponse | PlainMessage<GetKeyAccessServerResponse> | undefined,
    b: GetKeyAccessServerResponse | PlainMessage<GetKeyAccessServerResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetKeyAccessServerResponse, a, b);
  }
}

/**
 * @generated from message policy.kasregistry.ListKeyAccessServersRequest
 */
export class ListKeyAccessServersRequest extends Message<ListKeyAccessServersRequest> {
  constructor(data?: PartialMessage<ListKeyAccessServersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.kasregistry.ListKeyAccessServersRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListKeyAccessServersRequest {
    return new ListKeyAccessServersRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListKeyAccessServersRequest {
    return new ListKeyAccessServersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListKeyAccessServersRequest {
    return new ListKeyAccessServersRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListKeyAccessServersRequest | PlainMessage<ListKeyAccessServersRequest> | undefined,
    b: ListKeyAccessServersRequest | PlainMessage<ListKeyAccessServersRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListKeyAccessServersRequest, a, b);
  }
}

/**
 * @generated from message policy.kasregistry.ListKeyAccessServersResponse
 */
export class ListKeyAccessServersResponse extends Message<ListKeyAccessServersResponse> {
  /**
   * @generated from field: repeated policy.KeyAccessServer key_access_servers = 1;
   */
  keyAccessServers: KeyAccessServer[] = [];

  constructor(data?: PartialMessage<ListKeyAccessServersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.kasregistry.ListKeyAccessServersResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'key_access_servers', kind: 'message', T: KeyAccessServer, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListKeyAccessServersResponse {
    return new ListKeyAccessServersResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListKeyAccessServersResponse {
    return new ListKeyAccessServersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListKeyAccessServersResponse {
    return new ListKeyAccessServersResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListKeyAccessServersResponse | PlainMessage<ListKeyAccessServersResponse> | undefined,
    b: ListKeyAccessServersResponse | PlainMessage<ListKeyAccessServersResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListKeyAccessServersResponse, a, b);
  }
}

/**
 * @generated from message policy.kasregistry.CreateKeyAccessServerRequest
 */
export class CreateKeyAccessServerRequest extends Message<CreateKeyAccessServerRequest> {
  /**
   * Required
   *
   * @generated from field: string uri = 1;
   */
  uri = '';

  /**
   * @generated from field: policy.PublicKey public_key = 2;
   */
  publicKey?: PublicKey;

  /**
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  constructor(data?: PartialMessage<CreateKeyAccessServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.kasregistry.CreateKeyAccessServerRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'public_key', kind: 'message', T: PublicKey },
    { no: 100, name: 'metadata', kind: 'message', T: MetadataMutable },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateKeyAccessServerRequest {
    return new CreateKeyAccessServerRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateKeyAccessServerRequest {
    return new CreateKeyAccessServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateKeyAccessServerRequest {
    return new CreateKeyAccessServerRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateKeyAccessServerRequest | PlainMessage<CreateKeyAccessServerRequest> | undefined,
    b: CreateKeyAccessServerRequest | PlainMessage<CreateKeyAccessServerRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateKeyAccessServerRequest, a, b);
  }
}

/**
 * @generated from message policy.kasregistry.CreateKeyAccessServerResponse
 */
export class CreateKeyAccessServerResponse extends Message<CreateKeyAccessServerResponse> {
  /**
   * @generated from field: policy.KeyAccessServer key_access_server = 1;
   */
  keyAccessServer?: KeyAccessServer;

  constructor(data?: PartialMessage<CreateKeyAccessServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.kasregistry.CreateKeyAccessServerResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'key_access_server', kind: 'message', T: KeyAccessServer },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateKeyAccessServerResponse {
    return new CreateKeyAccessServerResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateKeyAccessServerResponse {
    return new CreateKeyAccessServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateKeyAccessServerResponse {
    return new CreateKeyAccessServerResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateKeyAccessServerResponse | PlainMessage<CreateKeyAccessServerResponse> | undefined,
    b: CreateKeyAccessServerResponse | PlainMessage<CreateKeyAccessServerResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateKeyAccessServerResponse, a, b);
  }
}

/**
 * @generated from message policy.kasregistry.UpdateKeyAccessServerRequest
 */
export class UpdateKeyAccessServerRequest extends Message<UpdateKeyAccessServerRequest> {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * @generated from field: string uri = 2;
   */
  uri = '';

  /**
   * @generated from field: policy.PublicKey public_key = 3;
   */
  publicKey?: PublicKey;

  /**
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  /**
   * @generated from field: common.MetadataUpdateEnum metadata_update_behavior = 101;
   */
  metadataUpdateBehavior = MetadataUpdateEnum.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateKeyAccessServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.kasregistry.UpdateKeyAccessServerRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'public_key', kind: 'message', T: PublicKey },
    { no: 100, name: 'metadata', kind: 'message', T: MetadataMutable },
    {
      no: 101,
      name: 'metadata_update_behavior',
      kind: 'enum',
      T: proto3.getEnumType(MetadataUpdateEnum),
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateKeyAccessServerRequest {
    return new UpdateKeyAccessServerRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateKeyAccessServerRequest {
    return new UpdateKeyAccessServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateKeyAccessServerRequest {
    return new UpdateKeyAccessServerRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateKeyAccessServerRequest | PlainMessage<UpdateKeyAccessServerRequest> | undefined,
    b: UpdateKeyAccessServerRequest | PlainMessage<UpdateKeyAccessServerRequest> | undefined
  ): boolean {
    return proto3.util.equals(UpdateKeyAccessServerRequest, a, b);
  }
}

/**
 * @generated from message policy.kasregistry.UpdateKeyAccessServerResponse
 */
export class UpdateKeyAccessServerResponse extends Message<UpdateKeyAccessServerResponse> {
  /**
   * @generated from field: policy.KeyAccessServer key_access_server = 1;
   */
  keyAccessServer?: KeyAccessServer;

  constructor(data?: PartialMessage<UpdateKeyAccessServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.kasregistry.UpdateKeyAccessServerResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'key_access_server', kind: 'message', T: KeyAccessServer },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateKeyAccessServerResponse {
    return new UpdateKeyAccessServerResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateKeyAccessServerResponse {
    return new UpdateKeyAccessServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateKeyAccessServerResponse {
    return new UpdateKeyAccessServerResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateKeyAccessServerResponse | PlainMessage<UpdateKeyAccessServerResponse> | undefined,
    b: UpdateKeyAccessServerResponse | PlainMessage<UpdateKeyAccessServerResponse> | undefined
  ): boolean {
    return proto3.util.equals(UpdateKeyAccessServerResponse, a, b);
  }
}

/**
 * @generated from message policy.kasregistry.DeleteKeyAccessServerRequest
 */
export class DeleteKeyAccessServerRequest extends Message<DeleteKeyAccessServerRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<DeleteKeyAccessServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.kasregistry.DeleteKeyAccessServerRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteKeyAccessServerRequest {
    return new DeleteKeyAccessServerRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteKeyAccessServerRequest {
    return new DeleteKeyAccessServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteKeyAccessServerRequest {
    return new DeleteKeyAccessServerRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteKeyAccessServerRequest | PlainMessage<DeleteKeyAccessServerRequest> | undefined,
    b: DeleteKeyAccessServerRequest | PlainMessage<DeleteKeyAccessServerRequest> | undefined
  ): boolean {
    return proto3.util.equals(DeleteKeyAccessServerRequest, a, b);
  }
}

/**
 * @generated from message policy.kasregistry.DeleteKeyAccessServerResponse
 */
export class DeleteKeyAccessServerResponse extends Message<DeleteKeyAccessServerResponse> {
  /**
   * @generated from field: policy.KeyAccessServer key_access_server = 1;
   */
  keyAccessServer?: KeyAccessServer;

  constructor(data?: PartialMessage<DeleteKeyAccessServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.kasregistry.DeleteKeyAccessServerResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'key_access_server', kind: 'message', T: KeyAccessServer },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteKeyAccessServerResponse {
    return new DeleteKeyAccessServerResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteKeyAccessServerResponse {
    return new DeleteKeyAccessServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteKeyAccessServerResponse {
    return new DeleteKeyAccessServerResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteKeyAccessServerResponse | PlainMessage<DeleteKeyAccessServerResponse> | undefined,
    b: DeleteKeyAccessServerResponse | PlainMessage<DeleteKeyAccessServerResponse> | undefined
  ): boolean {
    return proto3.util.equals(DeleteKeyAccessServerResponse, a, b);
  }
}
