// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file policy/selectors.proto (package policy, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * @generated from message policy.AttributeNamespaceSelector
 */
export class AttributeNamespaceSelector extends Message<AttributeNamespaceSelector> {
  /**
   * @generated from field: policy.AttributeNamespaceSelector.AttributeSelector with_attributes = 10;
   */
  withAttributes?: AttributeNamespaceSelector_AttributeSelector;

  constructor(data?: PartialMessage<AttributeNamespaceSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.AttributeNamespaceSelector';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 10,
      name: 'with_attributes',
      kind: 'message',
      T: AttributeNamespaceSelector_AttributeSelector,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AttributeNamespaceSelector {
    return new AttributeNamespaceSelector().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AttributeNamespaceSelector {
    return new AttributeNamespaceSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AttributeNamespaceSelector {
    return new AttributeNamespaceSelector().fromJsonString(jsonString, options);
  }

  static equals(
    a: AttributeNamespaceSelector | PlainMessage<AttributeNamespaceSelector> | undefined,
    b: AttributeNamespaceSelector | PlainMessage<AttributeNamespaceSelector> | undefined
  ): boolean {
    return proto3.util.equals(AttributeNamespaceSelector, a, b);
  }
}

/**
 * @generated from message policy.AttributeNamespaceSelector.AttributeSelector
 */
export class AttributeNamespaceSelector_AttributeSelector extends Message<AttributeNamespaceSelector_AttributeSelector> {
  /**
   * @generated from field: bool with_key_access_grants = 1;
   */
  withKeyAccessGrants = false;

  /**
   * @generated from field: policy.AttributeNamespaceSelector.AttributeSelector.ValueSelector with_values = 10;
   */
  withValues?: AttributeNamespaceSelector_AttributeSelector_ValueSelector;

  constructor(data?: PartialMessage<AttributeNamespaceSelector_AttributeSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.AttributeNamespaceSelector.AttributeSelector';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'with_key_access_grants', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 10,
      name: 'with_values',
      kind: 'message',
      T: AttributeNamespaceSelector_AttributeSelector_ValueSelector,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AttributeNamespaceSelector_AttributeSelector {
    return new AttributeNamespaceSelector_AttributeSelector().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AttributeNamespaceSelector_AttributeSelector {
    return new AttributeNamespaceSelector_AttributeSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AttributeNamespaceSelector_AttributeSelector {
    return new AttributeNamespaceSelector_AttributeSelector().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | AttributeNamespaceSelector_AttributeSelector
      | PlainMessage<AttributeNamespaceSelector_AttributeSelector>
      | undefined,
    b:
      | AttributeNamespaceSelector_AttributeSelector
      | PlainMessage<AttributeNamespaceSelector_AttributeSelector>
      | undefined
  ): boolean {
    return proto3.util.equals(AttributeNamespaceSelector_AttributeSelector, a, b);
  }
}

/**
 * @generated from message policy.AttributeNamespaceSelector.AttributeSelector.ValueSelector
 */
export class AttributeNamespaceSelector_AttributeSelector_ValueSelector extends Message<AttributeNamespaceSelector_AttributeSelector_ValueSelector> {
  /**
   * @generated from field: bool with_key_access_grants = 1;
   */
  withKeyAccessGrants = false;

  /**
   * @generated from field: bool with_subject_maps = 2;
   */
  withSubjectMaps = false;

  /**
   * @generated from field: bool with_resource_maps = 3;
   */
  withResourceMaps = false;

  constructor(data?: PartialMessage<AttributeNamespaceSelector_AttributeSelector_ValueSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.AttributeNamespaceSelector.AttributeSelector.ValueSelector';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'with_key_access_grants', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'with_subject_maps', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'with_resource_maps', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AttributeNamespaceSelector_AttributeSelector_ValueSelector {
    return new AttributeNamespaceSelector_AttributeSelector_ValueSelector().fromBinary(
      bytes,
      options
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AttributeNamespaceSelector_AttributeSelector_ValueSelector {
    return new AttributeNamespaceSelector_AttributeSelector_ValueSelector().fromJson(
      jsonValue,
      options
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AttributeNamespaceSelector_AttributeSelector_ValueSelector {
    return new AttributeNamespaceSelector_AttributeSelector_ValueSelector().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | AttributeNamespaceSelector_AttributeSelector_ValueSelector
      | PlainMessage<AttributeNamespaceSelector_AttributeSelector_ValueSelector>
      | undefined,
    b:
      | AttributeNamespaceSelector_AttributeSelector_ValueSelector
      | PlainMessage<AttributeNamespaceSelector_AttributeSelector_ValueSelector>
      | undefined
  ): boolean {
    return proto3.util.equals(AttributeNamespaceSelector_AttributeSelector_ValueSelector, a, b);
  }
}

/**
 * @generated from message policy.AttributeDefinitionSelector
 */
export class AttributeDefinitionSelector extends Message<AttributeDefinitionSelector> {
  /**
   * @generated from field: bool with_key_access_grants = 1;
   */
  withKeyAccessGrants = false;

  /**
   * @generated from field: policy.AttributeDefinitionSelector.NamespaceSelector with_namespace = 10;
   */
  withNamespace?: AttributeDefinitionSelector_NamespaceSelector;

  /**
   * @generated from field: policy.AttributeDefinitionSelector.ValueSelector with_values = 11;
   */
  withValues?: AttributeDefinitionSelector_ValueSelector;

  constructor(data?: PartialMessage<AttributeDefinitionSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.AttributeDefinitionSelector';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'with_key_access_grants', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 10,
      name: 'with_namespace',
      kind: 'message',
      T: AttributeDefinitionSelector_NamespaceSelector,
    },
    { no: 11, name: 'with_values', kind: 'message', T: AttributeDefinitionSelector_ValueSelector },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AttributeDefinitionSelector {
    return new AttributeDefinitionSelector().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AttributeDefinitionSelector {
    return new AttributeDefinitionSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AttributeDefinitionSelector {
    return new AttributeDefinitionSelector().fromJsonString(jsonString, options);
  }

  static equals(
    a: AttributeDefinitionSelector | PlainMessage<AttributeDefinitionSelector> | undefined,
    b: AttributeDefinitionSelector | PlainMessage<AttributeDefinitionSelector> | undefined
  ): boolean {
    return proto3.util.equals(AttributeDefinitionSelector, a, b);
  }
}

/**
 * @generated from message policy.AttributeDefinitionSelector.NamespaceSelector
 */
export class AttributeDefinitionSelector_NamespaceSelector extends Message<AttributeDefinitionSelector_NamespaceSelector> {
  constructor(data?: PartialMessage<AttributeDefinitionSelector_NamespaceSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.AttributeDefinitionSelector.NamespaceSelector';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AttributeDefinitionSelector_NamespaceSelector {
    return new AttributeDefinitionSelector_NamespaceSelector().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AttributeDefinitionSelector_NamespaceSelector {
    return new AttributeDefinitionSelector_NamespaceSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AttributeDefinitionSelector_NamespaceSelector {
    return new AttributeDefinitionSelector_NamespaceSelector().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | AttributeDefinitionSelector_NamespaceSelector
      | PlainMessage<AttributeDefinitionSelector_NamespaceSelector>
      | undefined,
    b:
      | AttributeDefinitionSelector_NamespaceSelector
      | PlainMessage<AttributeDefinitionSelector_NamespaceSelector>
      | undefined
  ): boolean {
    return proto3.util.equals(AttributeDefinitionSelector_NamespaceSelector, a, b);
  }
}

/**
 * @generated from message policy.AttributeDefinitionSelector.ValueSelector
 */
export class AttributeDefinitionSelector_ValueSelector extends Message<AttributeDefinitionSelector_ValueSelector> {
  /**
   * @generated from field: bool with_key_access_grants = 1;
   */
  withKeyAccessGrants = false;

  /**
   * @generated from field: bool with_subject_maps = 2;
   */
  withSubjectMaps = false;

  /**
   * @generated from field: bool with_resource_maps = 3;
   */
  withResourceMaps = false;

  constructor(data?: PartialMessage<AttributeDefinitionSelector_ValueSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.AttributeDefinitionSelector.ValueSelector';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'with_key_access_grants', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'with_subject_maps', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'with_resource_maps', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AttributeDefinitionSelector_ValueSelector {
    return new AttributeDefinitionSelector_ValueSelector().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AttributeDefinitionSelector_ValueSelector {
    return new AttributeDefinitionSelector_ValueSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AttributeDefinitionSelector_ValueSelector {
    return new AttributeDefinitionSelector_ValueSelector().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | AttributeDefinitionSelector_ValueSelector
      | PlainMessage<AttributeDefinitionSelector_ValueSelector>
      | undefined,
    b:
      | AttributeDefinitionSelector_ValueSelector
      | PlainMessage<AttributeDefinitionSelector_ValueSelector>
      | undefined
  ): boolean {
    return proto3.util.equals(AttributeDefinitionSelector_ValueSelector, a, b);
  }
}

/**
 * @generated from message policy.AttributeValueSelector
 */
export class AttributeValueSelector extends Message<AttributeValueSelector> {
  /**
   * @generated from field: bool with_key_access_grants = 1;
   */
  withKeyAccessGrants = false;

  /**
   * @generated from field: bool with_subject_maps = 2;
   */
  withSubjectMaps = false;

  /**
   * @generated from field: bool with_resource_maps = 3;
   */
  withResourceMaps = false;

  /**
   * @generated from field: policy.AttributeValueSelector.AttributeSelector with_attribute = 10;
   */
  withAttribute?: AttributeValueSelector_AttributeSelector;

  constructor(data?: PartialMessage<AttributeValueSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.AttributeValueSelector';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'with_key_access_grants', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'with_subject_maps', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'with_resource_maps', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 10,
      name: 'with_attribute',
      kind: 'message',
      T: AttributeValueSelector_AttributeSelector,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AttributeValueSelector {
    return new AttributeValueSelector().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AttributeValueSelector {
    return new AttributeValueSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AttributeValueSelector {
    return new AttributeValueSelector().fromJsonString(jsonString, options);
  }

  static equals(
    a: AttributeValueSelector | PlainMessage<AttributeValueSelector> | undefined,
    b: AttributeValueSelector | PlainMessage<AttributeValueSelector> | undefined
  ): boolean {
    return proto3.util.equals(AttributeValueSelector, a, b);
  }
}

/**
 * @generated from message policy.AttributeValueSelector.AttributeSelector
 */
export class AttributeValueSelector_AttributeSelector extends Message<AttributeValueSelector_AttributeSelector> {
  /**
   * @generated from field: bool with_key_access_grants = 1;
   */
  withKeyAccessGrants = false;

  /**
   * @generated from field: policy.AttributeValueSelector.AttributeSelector.NamespaceSelector with_namespace = 10;
   */
  withNamespace?: AttributeValueSelector_AttributeSelector_NamespaceSelector;

  constructor(data?: PartialMessage<AttributeValueSelector_AttributeSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.AttributeValueSelector.AttributeSelector';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'with_key_access_grants', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 10,
      name: 'with_namespace',
      kind: 'message',
      T: AttributeValueSelector_AttributeSelector_NamespaceSelector,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AttributeValueSelector_AttributeSelector {
    return new AttributeValueSelector_AttributeSelector().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AttributeValueSelector_AttributeSelector {
    return new AttributeValueSelector_AttributeSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AttributeValueSelector_AttributeSelector {
    return new AttributeValueSelector_AttributeSelector().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | AttributeValueSelector_AttributeSelector
      | PlainMessage<AttributeValueSelector_AttributeSelector>
      | undefined,
    b:
      | AttributeValueSelector_AttributeSelector
      | PlainMessage<AttributeValueSelector_AttributeSelector>
      | undefined
  ): boolean {
    return proto3.util.equals(AttributeValueSelector_AttributeSelector, a, b);
  }
}

/**
 * @generated from message policy.AttributeValueSelector.AttributeSelector.NamespaceSelector
 */
export class AttributeValueSelector_AttributeSelector_NamespaceSelector extends Message<AttributeValueSelector_AttributeSelector_NamespaceSelector> {
  constructor(data?: PartialMessage<AttributeValueSelector_AttributeSelector_NamespaceSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.AttributeValueSelector.AttributeSelector.NamespaceSelector';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AttributeValueSelector_AttributeSelector_NamespaceSelector {
    return new AttributeValueSelector_AttributeSelector_NamespaceSelector().fromBinary(
      bytes,
      options
    );
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AttributeValueSelector_AttributeSelector_NamespaceSelector {
    return new AttributeValueSelector_AttributeSelector_NamespaceSelector().fromJson(
      jsonValue,
      options
    );
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AttributeValueSelector_AttributeSelector_NamespaceSelector {
    return new AttributeValueSelector_AttributeSelector_NamespaceSelector().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | AttributeValueSelector_AttributeSelector_NamespaceSelector
      | PlainMessage<AttributeValueSelector_AttributeSelector_NamespaceSelector>
      | undefined,
    b:
      | AttributeValueSelector_AttributeSelector_NamespaceSelector
      | PlainMessage<AttributeValueSelector_AttributeSelector_NamespaceSelector>
      | undefined
  ): boolean {
    return proto3.util.equals(AttributeValueSelector_AttributeSelector_NamespaceSelector, a, b);
  }
}
