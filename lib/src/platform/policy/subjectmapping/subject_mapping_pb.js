// @generated by protoc-gen-es v1.9.0 with parameter "target=js+dts,import_extension=none"
// @generated from file policy/subjectmapping/subject_mapping.proto (package policy.subjectmapping, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Action, SubjectConditionSet, SubjectMapping, SubjectProperty, SubjectSet } from "../objects_pb";
import { MetadataMutable, MetadataUpdateEnum } from "../../common/common_pb";

/**
 * MatchSubjectMappingsRequest liberally returns a list of SubjectMappings based on the provided SubjectProperties. The SubjectMappings are returned
 * if there is any single condition found among the structures that matches for one of the provided properties:
 * 1. The external selector value, external value, and an IN operator
 * 2. The external selector value, _no_ external value, and a NOT_IN operator
 *
 * Without this filtering, if a selector value was something like '.emailAddress' or '.username', every Subject is probably going to relate to that mapping
 * in some way or another, potentially matching every single attribute in the DB if a policy admin has relied heavily on that field. There is no
 * logic applied beyond a single condition within the query to avoid business logic interpreting the supplied conditions beyond the bare minimum
 * initial filter.
 *
 * NOTE: if you have any issues, debug logs are available within the service to help identify why a mapping was or was not returned.
 *
 * @generated from message policy.subjectmapping.MatchSubjectMappingsRequest
 */
export const MatchSubjectMappingsRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.MatchSubjectMappingsRequest",
  () => [
    { no: 1, name: "subject_properties", kind: "message", T: SubjectProperty, repeated: true },
  ],
);

/**
 * @generated from message policy.subjectmapping.MatchSubjectMappingsResponse
 */
export const MatchSubjectMappingsResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.MatchSubjectMappingsResponse",
  () => [
    { no: 1, name: "subject_mappings", kind: "message", T: SubjectMapping, repeated: true },
  ],
);

/**
 * @generated from message policy.subjectmapping.GetSubjectMappingRequest
 */
export const GetSubjectMappingRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.GetSubjectMappingRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message policy.subjectmapping.GetSubjectMappingResponse
 */
export const GetSubjectMappingResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.GetSubjectMappingResponse",
  () => [
    { no: 1, name: "subject_mapping", kind: "message", T: SubjectMapping },
  ],
);

/**
 * @generated from message policy.subjectmapping.ListSubjectMappingsRequest
 */
export const ListSubjectMappingsRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.ListSubjectMappingsRequest",
  [],
);

/**
 * @generated from message policy.subjectmapping.ListSubjectMappingsResponse
 */
export const ListSubjectMappingsResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.ListSubjectMappingsResponse",
  () => [
    { no: 1, name: "subject_mappings", kind: "message", T: SubjectMapping, repeated: true },
  ],
);

/**
 * @generated from message policy.subjectmapping.CreateSubjectMappingRequest
 */
export const CreateSubjectMappingRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.CreateSubjectMappingRequest",
  () => [
    { no: 1, name: "attribute_value_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "actions", kind: "message", T: Action, repeated: true },
    { no: 3, name: "existing_subject_condition_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "new_subject_condition_set", kind: "message", T: SubjectConditionSetCreate },
    { no: 100, name: "metadata", kind: "message", T: MetadataMutable },
  ],
);

/**
 * @generated from message policy.subjectmapping.CreateSubjectMappingResponse
 */
export const CreateSubjectMappingResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.CreateSubjectMappingResponse",
  () => [
    { no: 1, name: "subject_mapping", kind: "message", T: SubjectMapping },
  ],
);

/**
 * @generated from message policy.subjectmapping.UpdateSubjectMappingRequest
 */
export const UpdateSubjectMappingRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.UpdateSubjectMappingRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject_condition_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "actions", kind: "message", T: Action, repeated: true },
    { no: 100, name: "metadata", kind: "message", T: MetadataMutable },
    { no: 101, name: "metadata_update_behavior", kind: "enum", T: proto3.getEnumType(MetadataUpdateEnum) },
  ],
);

/**
 * @generated from message policy.subjectmapping.UpdateSubjectMappingResponse
 */
export const UpdateSubjectMappingResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.UpdateSubjectMappingResponse",
  () => [
    { no: 1, name: "subject_mapping", kind: "message", T: SubjectMapping },
  ],
);

/**
 * @generated from message policy.subjectmapping.DeleteSubjectMappingRequest
 */
export const DeleteSubjectMappingRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.DeleteSubjectMappingRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message policy.subjectmapping.DeleteSubjectMappingResponse
 */
export const DeleteSubjectMappingResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.DeleteSubjectMappingResponse",
  () => [
    { no: 1, name: "subject_mapping", kind: "message", T: SubjectMapping },
  ],
);

/**
 * @generated from message policy.subjectmapping.GetSubjectConditionSetRequest
 */
export const GetSubjectConditionSetRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.GetSubjectConditionSetRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message policy.subjectmapping.GetSubjectConditionSetResponse
 */
export const GetSubjectConditionSetResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.GetSubjectConditionSetResponse",
  () => [
    { no: 1, name: "subject_condition_set", kind: "message", T: SubjectConditionSet },
    { no: 2, name: "associated_subject_mappings", kind: "message", T: SubjectMapping, repeated: true },
  ],
);

/**
 * @generated from message policy.subjectmapping.ListSubjectConditionSetsRequest
 */
export const ListSubjectConditionSetsRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.ListSubjectConditionSetsRequest",
  [],
);

/**
 * @generated from message policy.subjectmapping.ListSubjectConditionSetsResponse
 */
export const ListSubjectConditionSetsResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.ListSubjectConditionSetsResponse",
  () => [
    { no: 1, name: "subject_condition_sets", kind: "message", T: SubjectConditionSet, repeated: true },
  ],
);

/**
 * @generated from message policy.subjectmapping.SubjectConditionSetCreate
 */
export const SubjectConditionSetCreate = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.SubjectConditionSetCreate",
  () => [
    { no: 1, name: "subject_sets", kind: "message", T: SubjectSet, repeated: true },
    { no: 100, name: "metadata", kind: "message", T: MetadataMutable },
  ],
);

/**
 * @generated from message policy.subjectmapping.CreateSubjectConditionSetRequest
 */
export const CreateSubjectConditionSetRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.CreateSubjectConditionSetRequest",
  () => [
    { no: 1, name: "subject_condition_set", kind: "message", T: SubjectConditionSetCreate },
  ],
);

/**
 * @generated from message policy.subjectmapping.CreateSubjectConditionSetResponse
 */
export const CreateSubjectConditionSetResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.CreateSubjectConditionSetResponse",
  () => [
    { no: 1, name: "subject_condition_set", kind: "message", T: SubjectConditionSet },
  ],
);

/**
 * @generated from message policy.subjectmapping.UpdateSubjectConditionSetRequest
 */
export const UpdateSubjectConditionSetRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.UpdateSubjectConditionSetRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject_sets", kind: "message", T: SubjectSet, repeated: true },
    { no: 100, name: "metadata", kind: "message", T: MetadataMutable },
    { no: 101, name: "metadata_update_behavior", kind: "enum", T: proto3.getEnumType(MetadataUpdateEnum) },
  ],
);

/**
 * @generated from message policy.subjectmapping.UpdateSubjectConditionSetResponse
 */
export const UpdateSubjectConditionSetResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.UpdateSubjectConditionSetResponse",
  () => [
    { no: 1, name: "subject_condition_set", kind: "message", T: SubjectConditionSet },
  ],
);

/**
 * @generated from message policy.subjectmapping.DeleteSubjectConditionSetRequest
 */
export const DeleteSubjectConditionSetRequest = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.DeleteSubjectConditionSetRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message policy.subjectmapping.DeleteSubjectConditionSetResponse
 */
export const DeleteSubjectConditionSetResponse = /*@__PURE__*/ proto3.makeMessageType(
  "policy.subjectmapping.DeleteSubjectConditionSetResponse",
  () => [
    { no: 1, name: "subject_condition_set", kind: "message", T: SubjectConditionSet },
  ],
);

