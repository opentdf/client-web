// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file policy/subjectmapping/subject_mapping.proto (package policy.subjectmapping, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import {
  Action,
  SubjectConditionSet,
  SubjectMapping,
  SubjectProperty,
  SubjectSet,
} from '../objects_pb.js';
import { MetadataMutable, MetadataUpdateEnum } from '../../common/common_pb.js';

/**
 * MatchSubjectMappingsRequest liberally returns a list of SubjectMappings based on the provided SubjectProperties. The SubjectMappings are returned
 * if there is any single condition found among the structures that matches for one of the provided properties:
 * 1. The external selector value, external value, and an IN operator
 * 2. The external selector value, _no_ external value, and a NOT_IN operator
 *
 * Without this filtering, if a selector value was something like '.emailAddress' or '.username', every Subject is probably going to relate to that mapping
 * in some way or another, potentially matching every single attribute in the DB if a policy admin has relied heavily on that field. There is no
 * logic applied beyond a single condition within the query to avoid business logic interpreting the supplied conditions beyond the bare minimum
 * initial filter.
 *
 * NOTE: if you have any issues, debug logs are available within the service to help identify why a mapping was or was not returned.
 *
 * @generated from message policy.subjectmapping.MatchSubjectMappingsRequest
 */
export class MatchSubjectMappingsRequest extends Message<MatchSubjectMappingsRequest> {
  /**
   * @generated from field: repeated policy.SubjectProperty subject_properties = 1;
   */
  subjectProperties: SubjectProperty[] = [];

  constructor(data?: PartialMessage<MatchSubjectMappingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.MatchSubjectMappingsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_properties', kind: 'message', T: SubjectProperty, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): MatchSubjectMappingsRequest {
    return new MatchSubjectMappingsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): MatchSubjectMappingsRequest {
    return new MatchSubjectMappingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): MatchSubjectMappingsRequest {
    return new MatchSubjectMappingsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: MatchSubjectMappingsRequest | PlainMessage<MatchSubjectMappingsRequest> | undefined,
    b: MatchSubjectMappingsRequest | PlainMessage<MatchSubjectMappingsRequest> | undefined
  ): boolean {
    return proto3.util.equals(MatchSubjectMappingsRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.MatchSubjectMappingsResponse
 */
export class MatchSubjectMappingsResponse extends Message<MatchSubjectMappingsResponse> {
  /**
   * @generated from field: repeated policy.SubjectMapping subject_mappings = 1;
   */
  subjectMappings: SubjectMapping[] = [];

  constructor(data?: PartialMessage<MatchSubjectMappingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.MatchSubjectMappingsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_mappings', kind: 'message', T: SubjectMapping, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): MatchSubjectMappingsResponse {
    return new MatchSubjectMappingsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): MatchSubjectMappingsResponse {
    return new MatchSubjectMappingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): MatchSubjectMappingsResponse {
    return new MatchSubjectMappingsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MatchSubjectMappingsResponse | PlainMessage<MatchSubjectMappingsResponse> | undefined,
    b: MatchSubjectMappingsResponse | PlainMessage<MatchSubjectMappingsResponse> | undefined
  ): boolean {
    return proto3.util.equals(MatchSubjectMappingsResponse, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.GetSubjectMappingRequest
 */
export class GetSubjectMappingRequest extends Message<GetSubjectMappingRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<GetSubjectMappingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.GetSubjectMappingRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSubjectMappingRequest {
    return new GetSubjectMappingRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSubjectMappingRequest {
    return new GetSubjectMappingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSubjectMappingRequest {
    return new GetSubjectMappingRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetSubjectMappingRequest | PlainMessage<GetSubjectMappingRequest> | undefined,
    b: GetSubjectMappingRequest | PlainMessage<GetSubjectMappingRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetSubjectMappingRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.GetSubjectMappingResponse
 */
export class GetSubjectMappingResponse extends Message<GetSubjectMappingResponse> {
  /**
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;

  constructor(data?: PartialMessage<GetSubjectMappingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.GetSubjectMappingResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_mapping', kind: 'message', T: SubjectMapping },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSubjectMappingResponse {
    return new GetSubjectMappingResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSubjectMappingResponse {
    return new GetSubjectMappingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSubjectMappingResponse {
    return new GetSubjectMappingResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetSubjectMappingResponse | PlainMessage<GetSubjectMappingResponse> | undefined,
    b: GetSubjectMappingResponse | PlainMessage<GetSubjectMappingResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetSubjectMappingResponse, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.ListSubjectMappingsRequest
 */
export class ListSubjectMappingsRequest extends Message<ListSubjectMappingsRequest> {
  constructor(data?: PartialMessage<ListSubjectMappingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.ListSubjectMappingsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListSubjectMappingsRequest {
    return new ListSubjectMappingsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListSubjectMappingsRequest {
    return new ListSubjectMappingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListSubjectMappingsRequest {
    return new ListSubjectMappingsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListSubjectMappingsRequest | PlainMessage<ListSubjectMappingsRequest> | undefined,
    b: ListSubjectMappingsRequest | PlainMessage<ListSubjectMappingsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListSubjectMappingsRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.ListSubjectMappingsResponse
 */
export class ListSubjectMappingsResponse extends Message<ListSubjectMappingsResponse> {
  /**
   * @generated from field: repeated policy.SubjectMapping subject_mappings = 1;
   */
  subjectMappings: SubjectMapping[] = [];

  constructor(data?: PartialMessage<ListSubjectMappingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.ListSubjectMappingsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_mappings', kind: 'message', T: SubjectMapping, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListSubjectMappingsResponse {
    return new ListSubjectMappingsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListSubjectMappingsResponse {
    return new ListSubjectMappingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListSubjectMappingsResponse {
    return new ListSubjectMappingsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListSubjectMappingsResponse | PlainMessage<ListSubjectMappingsResponse> | undefined,
    b: ListSubjectMappingsResponse | PlainMessage<ListSubjectMappingsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListSubjectMappingsResponse, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.CreateSubjectMappingRequest
 */
export class CreateSubjectMappingRequest extends Message<CreateSubjectMappingRequest> {
  /**
   * Required
   * Attribute Value to be mapped to
   *
   * @generated from field: string attribute_value_id = 1;
   */
  attributeValueId = '';

  /**
   * The actions permitted by subjects in this mapping
   *
   * @generated from field: repeated policy.Action actions = 2;
   */
  actions: Action[] = [];

  /**
   * Either of the following:
   * Reuse existing SubjectConditionSet (NOTE: prioritized over new_subject_condition_set)
   *
   * @generated from field: string existing_subject_condition_set_id = 3;
   */
  existingSubjectConditionSetId = '';

  /**
   * Create new SubjectConditionSet (NOTE: ignored if existing_subject_condition_set_id is provided)
   *
   * @generated from field: policy.subjectmapping.SubjectConditionSetCreate new_subject_condition_set = 4;
   */
  newSubjectConditionSet?: SubjectConditionSetCreate;

  /**
   * Optional
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  constructor(data?: PartialMessage<CreateSubjectMappingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.CreateSubjectMappingRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'attribute_value_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'actions', kind: 'message', T: Action, repeated: true },
    {
      no: 3,
      name: 'existing_subject_condition_set_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 4, name: 'new_subject_condition_set', kind: 'message', T: SubjectConditionSetCreate },
    { no: 100, name: 'metadata', kind: 'message', T: MetadataMutable },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateSubjectMappingRequest {
    return new CreateSubjectMappingRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateSubjectMappingRequest {
    return new CreateSubjectMappingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateSubjectMappingRequest {
    return new CreateSubjectMappingRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateSubjectMappingRequest | PlainMessage<CreateSubjectMappingRequest> | undefined,
    b: CreateSubjectMappingRequest | PlainMessage<CreateSubjectMappingRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateSubjectMappingRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.CreateSubjectMappingResponse
 */
export class CreateSubjectMappingResponse extends Message<CreateSubjectMappingResponse> {
  /**
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;

  constructor(data?: PartialMessage<CreateSubjectMappingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.CreateSubjectMappingResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_mapping', kind: 'message', T: SubjectMapping },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateSubjectMappingResponse {
    return new CreateSubjectMappingResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateSubjectMappingResponse {
    return new CreateSubjectMappingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateSubjectMappingResponse {
    return new CreateSubjectMappingResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateSubjectMappingResponse | PlainMessage<CreateSubjectMappingResponse> | undefined,
    b: CreateSubjectMappingResponse | PlainMessage<CreateSubjectMappingResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateSubjectMappingResponse, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.UpdateSubjectMappingRequest
 */
export class UpdateSubjectMappingRequest extends Message<UpdateSubjectMappingRequest> {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * Optional
   * Replaces the existing SubjectConditionSet id with a new one
   *
   * @generated from field: string subject_condition_set_id = 2;
   */
  subjectConditionSetId = '';

  /**
   * Replaces entire list of actions permitted by subjects
   *
   * @generated from field: repeated policy.Action actions = 3;
   */
  actions: Action[] = [];

  /**
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  /**
   * @generated from field: common.MetadataUpdateEnum metadata_update_behavior = 101;
   */
  metadataUpdateBehavior = MetadataUpdateEnum.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateSubjectMappingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.UpdateSubjectMappingRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'subject_condition_set_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'actions', kind: 'message', T: Action, repeated: true },
    { no: 100, name: 'metadata', kind: 'message', T: MetadataMutable },
    {
      no: 101,
      name: 'metadata_update_behavior',
      kind: 'enum',
      T: proto3.getEnumType(MetadataUpdateEnum),
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateSubjectMappingRequest {
    return new UpdateSubjectMappingRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateSubjectMappingRequest {
    return new UpdateSubjectMappingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateSubjectMappingRequest {
    return new UpdateSubjectMappingRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateSubjectMappingRequest | PlainMessage<UpdateSubjectMappingRequest> | undefined,
    b: UpdateSubjectMappingRequest | PlainMessage<UpdateSubjectMappingRequest> | undefined
  ): boolean {
    return proto3.util.equals(UpdateSubjectMappingRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.UpdateSubjectMappingResponse
 */
export class UpdateSubjectMappingResponse extends Message<UpdateSubjectMappingResponse> {
  /**
   * Only ID of the updated Subject Mapping provided
   *
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;

  constructor(data?: PartialMessage<UpdateSubjectMappingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.UpdateSubjectMappingResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_mapping', kind: 'message', T: SubjectMapping },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateSubjectMappingResponse {
    return new UpdateSubjectMappingResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateSubjectMappingResponse {
    return new UpdateSubjectMappingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateSubjectMappingResponse {
    return new UpdateSubjectMappingResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateSubjectMappingResponse | PlainMessage<UpdateSubjectMappingResponse> | undefined,
    b: UpdateSubjectMappingResponse | PlainMessage<UpdateSubjectMappingResponse> | undefined
  ): boolean {
    return proto3.util.equals(UpdateSubjectMappingResponse, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.DeleteSubjectMappingRequest
 */
export class DeleteSubjectMappingRequest extends Message<DeleteSubjectMappingRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<DeleteSubjectMappingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.DeleteSubjectMappingRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteSubjectMappingRequest {
    return new DeleteSubjectMappingRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteSubjectMappingRequest {
    return new DeleteSubjectMappingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteSubjectMappingRequest {
    return new DeleteSubjectMappingRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteSubjectMappingRequest | PlainMessage<DeleteSubjectMappingRequest> | undefined,
    b: DeleteSubjectMappingRequest | PlainMessage<DeleteSubjectMappingRequest> | undefined
  ): boolean {
    return proto3.util.equals(DeleteSubjectMappingRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.DeleteSubjectMappingResponse
 */
export class DeleteSubjectMappingResponse extends Message<DeleteSubjectMappingResponse> {
  /**
   * Only ID of the updated Subject Mapping provided
   *
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;

  constructor(data?: PartialMessage<DeleteSubjectMappingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.DeleteSubjectMappingResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_mapping', kind: 'message', T: SubjectMapping },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteSubjectMappingResponse {
    return new DeleteSubjectMappingResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteSubjectMappingResponse {
    return new DeleteSubjectMappingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteSubjectMappingResponse {
    return new DeleteSubjectMappingResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteSubjectMappingResponse | PlainMessage<DeleteSubjectMappingResponse> | undefined,
    b: DeleteSubjectMappingResponse | PlainMessage<DeleteSubjectMappingResponse> | undefined
  ): boolean {
    return proto3.util.equals(DeleteSubjectMappingResponse, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.GetSubjectConditionSetRequest
 */
export class GetSubjectConditionSetRequest extends Message<GetSubjectConditionSetRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<GetSubjectConditionSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.GetSubjectConditionSetRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSubjectConditionSetRequest {
    return new GetSubjectConditionSetRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSubjectConditionSetRequest {
    return new GetSubjectConditionSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSubjectConditionSetRequest {
    return new GetSubjectConditionSetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetSubjectConditionSetRequest | PlainMessage<GetSubjectConditionSetRequest> | undefined,
    b: GetSubjectConditionSetRequest | PlainMessage<GetSubjectConditionSetRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetSubjectConditionSetRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.GetSubjectConditionSetResponse
 */
export class GetSubjectConditionSetResponse extends Message<GetSubjectConditionSetResponse> {
  /**
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;

  /**
   * contextualized Subject Mappings associated with this SubjectConditionSet
   *
   * @generated from field: repeated policy.SubjectMapping associated_subject_mappings = 2;
   */
  associatedSubjectMappings: SubjectMapping[] = [];

  constructor(data?: PartialMessage<GetSubjectConditionSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.GetSubjectConditionSetResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_condition_set', kind: 'message', T: SubjectConditionSet },
    {
      no: 2,
      name: 'associated_subject_mappings',
      kind: 'message',
      T: SubjectMapping,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSubjectConditionSetResponse {
    return new GetSubjectConditionSetResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSubjectConditionSetResponse {
    return new GetSubjectConditionSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSubjectConditionSetResponse {
    return new GetSubjectConditionSetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetSubjectConditionSetResponse | PlainMessage<GetSubjectConditionSetResponse> | undefined,
    b: GetSubjectConditionSetResponse | PlainMessage<GetSubjectConditionSetResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetSubjectConditionSetResponse, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.ListSubjectConditionSetsRequest
 */
export class ListSubjectConditionSetsRequest extends Message<ListSubjectConditionSetsRequest> {
  constructor(data?: PartialMessage<ListSubjectConditionSetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.ListSubjectConditionSetsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListSubjectConditionSetsRequest {
    return new ListSubjectConditionSetsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListSubjectConditionSetsRequest {
    return new ListSubjectConditionSetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListSubjectConditionSetsRequest {
    return new ListSubjectConditionSetsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListSubjectConditionSetsRequest | PlainMessage<ListSubjectConditionSetsRequest> | undefined,
    b: ListSubjectConditionSetsRequest | PlainMessage<ListSubjectConditionSetsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListSubjectConditionSetsRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.ListSubjectConditionSetsResponse
 */
export class ListSubjectConditionSetsResponse extends Message<ListSubjectConditionSetsResponse> {
  /**
   * @generated from field: repeated policy.SubjectConditionSet subject_condition_sets = 1;
   */
  subjectConditionSets: SubjectConditionSet[] = [];

  constructor(data?: PartialMessage<ListSubjectConditionSetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.ListSubjectConditionSetsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'subject_condition_sets',
      kind: 'message',
      T: SubjectConditionSet,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListSubjectConditionSetsResponse {
    return new ListSubjectConditionSetsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListSubjectConditionSetsResponse {
    return new ListSubjectConditionSetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListSubjectConditionSetsResponse {
    return new ListSubjectConditionSetsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | ListSubjectConditionSetsResponse
      | PlainMessage<ListSubjectConditionSetsResponse>
      | undefined,
    b: ListSubjectConditionSetsResponse | PlainMessage<ListSubjectConditionSetsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListSubjectConditionSetsResponse, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.SubjectConditionSetCreate
 */
export class SubjectConditionSetCreate extends Message<SubjectConditionSetCreate> {
  /**
   * Required
   *
   * @generated from field: repeated policy.SubjectSet subject_sets = 1;
   */
  subjectSets: SubjectSet[] = [];

  /**
   * Optional
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  constructor(data?: PartialMessage<SubjectConditionSetCreate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.SubjectConditionSetCreate';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_sets', kind: 'message', T: SubjectSet, repeated: true },
    { no: 100, name: 'metadata', kind: 'message', T: MetadataMutable },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SubjectConditionSetCreate {
    return new SubjectConditionSetCreate().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SubjectConditionSetCreate {
    return new SubjectConditionSetCreate().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SubjectConditionSetCreate {
    return new SubjectConditionSetCreate().fromJsonString(jsonString, options);
  }

  static equals(
    a: SubjectConditionSetCreate | PlainMessage<SubjectConditionSetCreate> | undefined,
    b: SubjectConditionSetCreate | PlainMessage<SubjectConditionSetCreate> | undefined
  ): boolean {
    return proto3.util.equals(SubjectConditionSetCreate, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.CreateSubjectConditionSetRequest
 */
export class CreateSubjectConditionSetRequest extends Message<CreateSubjectConditionSetRequest> {
  /**
   * @generated from field: policy.subjectmapping.SubjectConditionSetCreate subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSetCreate;

  constructor(data?: PartialMessage<CreateSubjectConditionSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.CreateSubjectConditionSetRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_condition_set', kind: 'message', T: SubjectConditionSetCreate },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateSubjectConditionSetRequest {
    return new CreateSubjectConditionSetRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateSubjectConditionSetRequest {
    return new CreateSubjectConditionSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateSubjectConditionSetRequest {
    return new CreateSubjectConditionSetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | CreateSubjectConditionSetRequest
      | PlainMessage<CreateSubjectConditionSetRequest>
      | undefined,
    b: CreateSubjectConditionSetRequest | PlainMessage<CreateSubjectConditionSetRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateSubjectConditionSetRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.CreateSubjectConditionSetResponse
 */
export class CreateSubjectConditionSetResponse extends Message<CreateSubjectConditionSetResponse> {
  /**
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;

  constructor(data?: PartialMessage<CreateSubjectConditionSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.CreateSubjectConditionSetResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_condition_set', kind: 'message', T: SubjectConditionSet },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateSubjectConditionSetResponse {
    return new CreateSubjectConditionSetResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateSubjectConditionSetResponse {
    return new CreateSubjectConditionSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateSubjectConditionSetResponse {
    return new CreateSubjectConditionSetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | CreateSubjectConditionSetResponse
      | PlainMessage<CreateSubjectConditionSetResponse>
      | undefined,
    b:
      | CreateSubjectConditionSetResponse
      | PlainMessage<CreateSubjectConditionSetResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateSubjectConditionSetResponse, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.UpdateSubjectConditionSetRequest
 */
export class UpdateSubjectConditionSetRequest extends Message<UpdateSubjectConditionSetRequest> {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * Optional
   * If provided, replaces entire existing structure of Subject Sets, Condition Groups, & Conditions
   *
   * @generated from field: repeated policy.SubjectSet subject_sets = 2;
   */
  subjectSets: SubjectSet[] = [];

  /**
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  /**
   * @generated from field: common.MetadataUpdateEnum metadata_update_behavior = 101;
   */
  metadataUpdateBehavior = MetadataUpdateEnum.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateSubjectConditionSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.UpdateSubjectConditionSetRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'subject_sets', kind: 'message', T: SubjectSet, repeated: true },
    { no: 100, name: 'metadata', kind: 'message', T: MetadataMutable },
    {
      no: 101,
      name: 'metadata_update_behavior',
      kind: 'enum',
      T: proto3.getEnumType(MetadataUpdateEnum),
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateSubjectConditionSetRequest {
    return new UpdateSubjectConditionSetRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateSubjectConditionSetRequest {
    return new UpdateSubjectConditionSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateSubjectConditionSetRequest {
    return new UpdateSubjectConditionSetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | UpdateSubjectConditionSetRequest
      | PlainMessage<UpdateSubjectConditionSetRequest>
      | undefined,
    b: UpdateSubjectConditionSetRequest | PlainMessage<UpdateSubjectConditionSetRequest> | undefined
  ): boolean {
    return proto3.util.equals(UpdateSubjectConditionSetRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.UpdateSubjectConditionSetResponse
 */
export class UpdateSubjectConditionSetResponse extends Message<UpdateSubjectConditionSetResponse> {
  /**
   * Only ID of updated Subject Condition Set provided
   *
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;

  constructor(data?: PartialMessage<UpdateSubjectConditionSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.UpdateSubjectConditionSetResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_condition_set', kind: 'message', T: SubjectConditionSet },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateSubjectConditionSetResponse {
    return new UpdateSubjectConditionSetResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateSubjectConditionSetResponse {
    return new UpdateSubjectConditionSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateSubjectConditionSetResponse {
    return new UpdateSubjectConditionSetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | UpdateSubjectConditionSetResponse
      | PlainMessage<UpdateSubjectConditionSetResponse>
      | undefined,
    b:
      | UpdateSubjectConditionSetResponse
      | PlainMessage<UpdateSubjectConditionSetResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateSubjectConditionSetResponse, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.DeleteSubjectConditionSetRequest
 */
export class DeleteSubjectConditionSetRequest extends Message<DeleteSubjectConditionSetRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<DeleteSubjectConditionSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.DeleteSubjectConditionSetRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteSubjectConditionSetRequest {
    return new DeleteSubjectConditionSetRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteSubjectConditionSetRequest {
    return new DeleteSubjectConditionSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteSubjectConditionSetRequest {
    return new DeleteSubjectConditionSetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | DeleteSubjectConditionSetRequest
      | PlainMessage<DeleteSubjectConditionSetRequest>
      | undefined,
    b: DeleteSubjectConditionSetRequest | PlainMessage<DeleteSubjectConditionSetRequest> | undefined
  ): boolean {
    return proto3.util.equals(DeleteSubjectConditionSetRequest, a, b);
  }
}

/**
 * @generated from message policy.subjectmapping.DeleteSubjectConditionSetResponse
 */
export class DeleteSubjectConditionSetResponse extends Message<DeleteSubjectConditionSetResponse> {
  /**
   * Only ID of deleted Subject Condition Set provided
   *
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;

  constructor(data?: PartialMessage<DeleteSubjectConditionSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.subjectmapping.DeleteSubjectConditionSetResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subject_condition_set', kind: 'message', T: SubjectConditionSet },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteSubjectConditionSetResponse {
    return new DeleteSubjectConditionSetResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteSubjectConditionSetResponse {
    return new DeleteSubjectConditionSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteSubjectConditionSetResponse {
    return new DeleteSubjectConditionSetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | DeleteSubjectConditionSetResponse
      | PlainMessage<DeleteSubjectConditionSetResponse>
      | undefined,
    b:
      | DeleteSubjectConditionSetResponse
      | PlainMessage<DeleteSubjectConditionSetResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteSubjectConditionSetResponse, a, b);
  }
}
