// @generated by protoc-gen-es v1.9.0 with parameter "target=js+dts,import_extension=none"
// @generated from file policy/subjectmapping/subject_mapping.proto (package policy.subjectmapping, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Action, SubjectConditionSet, SubjectMapping, SubjectProperty, SubjectSet } from "../objects_pb";
import type { MetadataMutable, MetadataUpdateEnum } from "../../common/common_pb";

/**
 * MatchSubjectMappingsRequest liberally returns a list of SubjectMappings based on the provided SubjectProperties. The SubjectMappings are returned
 * if there is any single condition found among the structures that matches for one of the provided properties:
 * 1. The external selector value, external value, and an IN operator
 * 2. The external selector value, _no_ external value, and a NOT_IN operator
 *
 * Without this filtering, if a selector value was something like '.emailAddress' or '.username', every Subject is probably going to relate to that mapping
 * in some way or another, potentially matching every single attribute in the DB if a policy admin has relied heavily on that field. There is no
 * logic applied beyond a single condition within the query to avoid business logic interpreting the supplied conditions beyond the bare minimum
 * initial filter.
 *
 * NOTE: if you have any issues, debug logs are available within the service to help identify why a mapping was or was not returned.
 *
 * @generated from message policy.subjectmapping.MatchSubjectMappingsRequest
 */
export declare class MatchSubjectMappingsRequest extends Message<MatchSubjectMappingsRequest> {
  /**
   * @generated from field: repeated policy.SubjectProperty subject_properties = 1;
   */
  subjectProperties: SubjectProperty[];

  constructor(data?: PartialMessage<MatchSubjectMappingsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.MatchSubjectMappingsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchSubjectMappingsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchSubjectMappingsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchSubjectMappingsRequest;

  static equals(a: MatchSubjectMappingsRequest | PlainMessage<MatchSubjectMappingsRequest> | undefined, b: MatchSubjectMappingsRequest | PlainMessage<MatchSubjectMappingsRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.MatchSubjectMappingsResponse
 */
export declare class MatchSubjectMappingsResponse extends Message<MatchSubjectMappingsResponse> {
  /**
   * @generated from field: repeated policy.SubjectMapping subject_mappings = 1;
   */
  subjectMappings: SubjectMapping[];

  constructor(data?: PartialMessage<MatchSubjectMappingsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.MatchSubjectMappingsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchSubjectMappingsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchSubjectMappingsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchSubjectMappingsResponse;

  static equals(a: MatchSubjectMappingsResponse | PlainMessage<MatchSubjectMappingsResponse> | undefined, b: MatchSubjectMappingsResponse | PlainMessage<MatchSubjectMappingsResponse> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.GetSubjectMappingRequest
 */
export declare class GetSubjectMappingRequest extends Message<GetSubjectMappingRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<GetSubjectMappingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.GetSubjectMappingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubjectMappingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubjectMappingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubjectMappingRequest;

  static equals(a: GetSubjectMappingRequest | PlainMessage<GetSubjectMappingRequest> | undefined, b: GetSubjectMappingRequest | PlainMessage<GetSubjectMappingRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.GetSubjectMappingResponse
 */
export declare class GetSubjectMappingResponse extends Message<GetSubjectMappingResponse> {
  /**
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;

  constructor(data?: PartialMessage<GetSubjectMappingResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.GetSubjectMappingResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubjectMappingResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubjectMappingResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubjectMappingResponse;

  static equals(a: GetSubjectMappingResponse | PlainMessage<GetSubjectMappingResponse> | undefined, b: GetSubjectMappingResponse | PlainMessage<GetSubjectMappingResponse> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.ListSubjectMappingsRequest
 */
export declare class ListSubjectMappingsRequest extends Message<ListSubjectMappingsRequest> {
  constructor(data?: PartialMessage<ListSubjectMappingsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.ListSubjectMappingsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSubjectMappingsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSubjectMappingsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSubjectMappingsRequest;

  static equals(a: ListSubjectMappingsRequest | PlainMessage<ListSubjectMappingsRequest> | undefined, b: ListSubjectMappingsRequest | PlainMessage<ListSubjectMappingsRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.ListSubjectMappingsResponse
 */
export declare class ListSubjectMappingsResponse extends Message<ListSubjectMappingsResponse> {
  /**
   * @generated from field: repeated policy.SubjectMapping subject_mappings = 1;
   */
  subjectMappings: SubjectMapping[];

  constructor(data?: PartialMessage<ListSubjectMappingsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.ListSubjectMappingsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSubjectMappingsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSubjectMappingsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSubjectMappingsResponse;

  static equals(a: ListSubjectMappingsResponse | PlainMessage<ListSubjectMappingsResponse> | undefined, b: ListSubjectMappingsResponse | PlainMessage<ListSubjectMappingsResponse> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.CreateSubjectMappingRequest
 */
export declare class CreateSubjectMappingRequest extends Message<CreateSubjectMappingRequest> {
  /**
   * Required
   * Attribute Value to be mapped to
   *
   * @generated from field: string attribute_value_id = 1;
   */
  attributeValueId: string;

  /**
   * The actions permitted by subjects in this mapping
   *
   * @generated from field: repeated policy.Action actions = 2;
   */
  actions: Action[];

  /**
   * Either of the following:
   * Reuse existing SubjectConditionSet (NOTE: prioritized over new_subject_condition_set)
   *
   * @generated from field: string existing_subject_condition_set_id = 3;
   */
  existingSubjectConditionSetId: string;

  /**
   * Create new SubjectConditionSet (NOTE: ignored if existing_subject_condition_set_id is provided)
   *
   * @generated from field: policy.subjectmapping.SubjectConditionSetCreate new_subject_condition_set = 4;
   */
  newSubjectConditionSet?: SubjectConditionSetCreate;

  /**
   * Optional
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  constructor(data?: PartialMessage<CreateSubjectMappingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.CreateSubjectMappingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSubjectMappingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSubjectMappingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSubjectMappingRequest;

  static equals(a: CreateSubjectMappingRequest | PlainMessage<CreateSubjectMappingRequest> | undefined, b: CreateSubjectMappingRequest | PlainMessage<CreateSubjectMappingRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.CreateSubjectMappingResponse
 */
export declare class CreateSubjectMappingResponse extends Message<CreateSubjectMappingResponse> {
  /**
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;

  constructor(data?: PartialMessage<CreateSubjectMappingResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.CreateSubjectMappingResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSubjectMappingResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSubjectMappingResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSubjectMappingResponse;

  static equals(a: CreateSubjectMappingResponse | PlainMessage<CreateSubjectMappingResponse> | undefined, b: CreateSubjectMappingResponse | PlainMessage<CreateSubjectMappingResponse> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.UpdateSubjectMappingRequest
 */
export declare class UpdateSubjectMappingRequest extends Message<UpdateSubjectMappingRequest> {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Optional
   * Replaces the existing SubjectConditionSet id with a new one
   *
   * @generated from field: string subject_condition_set_id = 2;
   */
  subjectConditionSetId: string;

  /**
   * Replaces entire list of actions permitted by subjects
   *
   * @generated from field: repeated policy.Action actions = 3;
   */
  actions: Action[];

  /**
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  /**
   * @generated from field: common.MetadataUpdateEnum metadata_update_behavior = 101;
   */
  metadataUpdateBehavior: MetadataUpdateEnum;

  constructor(data?: PartialMessage<UpdateSubjectMappingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.UpdateSubjectMappingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubjectMappingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubjectMappingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubjectMappingRequest;

  static equals(a: UpdateSubjectMappingRequest | PlainMessage<UpdateSubjectMappingRequest> | undefined, b: UpdateSubjectMappingRequest | PlainMessage<UpdateSubjectMappingRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.UpdateSubjectMappingResponse
 */
export declare class UpdateSubjectMappingResponse extends Message<UpdateSubjectMappingResponse> {
  /**
   * Only ID of the updated Subject Mapping provided
   *
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;

  constructor(data?: PartialMessage<UpdateSubjectMappingResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.UpdateSubjectMappingResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubjectMappingResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubjectMappingResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubjectMappingResponse;

  static equals(a: UpdateSubjectMappingResponse | PlainMessage<UpdateSubjectMappingResponse> | undefined, b: UpdateSubjectMappingResponse | PlainMessage<UpdateSubjectMappingResponse> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.DeleteSubjectMappingRequest
 */
export declare class DeleteSubjectMappingRequest extends Message<DeleteSubjectMappingRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<DeleteSubjectMappingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.DeleteSubjectMappingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSubjectMappingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSubjectMappingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSubjectMappingRequest;

  static equals(a: DeleteSubjectMappingRequest | PlainMessage<DeleteSubjectMappingRequest> | undefined, b: DeleteSubjectMappingRequest | PlainMessage<DeleteSubjectMappingRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.DeleteSubjectMappingResponse
 */
export declare class DeleteSubjectMappingResponse extends Message<DeleteSubjectMappingResponse> {
  /**
   * Only ID of the updated Subject Mapping provided
   *
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;

  constructor(data?: PartialMessage<DeleteSubjectMappingResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.DeleteSubjectMappingResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSubjectMappingResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSubjectMappingResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSubjectMappingResponse;

  static equals(a: DeleteSubjectMappingResponse | PlainMessage<DeleteSubjectMappingResponse> | undefined, b: DeleteSubjectMappingResponse | PlainMessage<DeleteSubjectMappingResponse> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.GetSubjectConditionSetRequest
 */
export declare class GetSubjectConditionSetRequest extends Message<GetSubjectConditionSetRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<GetSubjectConditionSetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.GetSubjectConditionSetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubjectConditionSetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubjectConditionSetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubjectConditionSetRequest;

  static equals(a: GetSubjectConditionSetRequest | PlainMessage<GetSubjectConditionSetRequest> | undefined, b: GetSubjectConditionSetRequest | PlainMessage<GetSubjectConditionSetRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.GetSubjectConditionSetResponse
 */
export declare class GetSubjectConditionSetResponse extends Message<GetSubjectConditionSetResponse> {
  /**
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;

  /**
   * contextualized Subject Mappings associated with this SubjectConditionSet
   *
   * @generated from field: repeated policy.SubjectMapping associated_subject_mappings = 2;
   */
  associatedSubjectMappings: SubjectMapping[];

  constructor(data?: PartialMessage<GetSubjectConditionSetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.GetSubjectConditionSetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubjectConditionSetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubjectConditionSetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubjectConditionSetResponse;

  static equals(a: GetSubjectConditionSetResponse | PlainMessage<GetSubjectConditionSetResponse> | undefined, b: GetSubjectConditionSetResponse | PlainMessage<GetSubjectConditionSetResponse> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.ListSubjectConditionSetsRequest
 */
export declare class ListSubjectConditionSetsRequest extends Message<ListSubjectConditionSetsRequest> {
  constructor(data?: PartialMessage<ListSubjectConditionSetsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.ListSubjectConditionSetsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSubjectConditionSetsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSubjectConditionSetsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSubjectConditionSetsRequest;

  static equals(a: ListSubjectConditionSetsRequest | PlainMessage<ListSubjectConditionSetsRequest> | undefined, b: ListSubjectConditionSetsRequest | PlainMessage<ListSubjectConditionSetsRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.ListSubjectConditionSetsResponse
 */
export declare class ListSubjectConditionSetsResponse extends Message<ListSubjectConditionSetsResponse> {
  /**
   * @generated from field: repeated policy.SubjectConditionSet subject_condition_sets = 1;
   */
  subjectConditionSets: SubjectConditionSet[];

  constructor(data?: PartialMessage<ListSubjectConditionSetsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.ListSubjectConditionSetsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSubjectConditionSetsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSubjectConditionSetsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSubjectConditionSetsResponse;

  static equals(a: ListSubjectConditionSetsResponse | PlainMessage<ListSubjectConditionSetsResponse> | undefined, b: ListSubjectConditionSetsResponse | PlainMessage<ListSubjectConditionSetsResponse> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.SubjectConditionSetCreate
 */
export declare class SubjectConditionSetCreate extends Message<SubjectConditionSetCreate> {
  /**
   * Required
   *
   * @generated from field: repeated policy.SubjectSet subject_sets = 1;
   */
  subjectSets: SubjectSet[];

  /**
   * Optional
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  constructor(data?: PartialMessage<SubjectConditionSetCreate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.SubjectConditionSetCreate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubjectConditionSetCreate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubjectConditionSetCreate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubjectConditionSetCreate;

  static equals(a: SubjectConditionSetCreate | PlainMessage<SubjectConditionSetCreate> | undefined, b: SubjectConditionSetCreate | PlainMessage<SubjectConditionSetCreate> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.CreateSubjectConditionSetRequest
 */
export declare class CreateSubjectConditionSetRequest extends Message<CreateSubjectConditionSetRequest> {
  /**
   * @generated from field: policy.subjectmapping.SubjectConditionSetCreate subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSetCreate;

  constructor(data?: PartialMessage<CreateSubjectConditionSetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.CreateSubjectConditionSetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSubjectConditionSetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSubjectConditionSetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSubjectConditionSetRequest;

  static equals(a: CreateSubjectConditionSetRequest | PlainMessage<CreateSubjectConditionSetRequest> | undefined, b: CreateSubjectConditionSetRequest | PlainMessage<CreateSubjectConditionSetRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.CreateSubjectConditionSetResponse
 */
export declare class CreateSubjectConditionSetResponse extends Message<CreateSubjectConditionSetResponse> {
  /**
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;

  constructor(data?: PartialMessage<CreateSubjectConditionSetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.CreateSubjectConditionSetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSubjectConditionSetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSubjectConditionSetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSubjectConditionSetResponse;

  static equals(a: CreateSubjectConditionSetResponse | PlainMessage<CreateSubjectConditionSetResponse> | undefined, b: CreateSubjectConditionSetResponse | PlainMessage<CreateSubjectConditionSetResponse> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.UpdateSubjectConditionSetRequest
 */
export declare class UpdateSubjectConditionSetRequest extends Message<UpdateSubjectConditionSetRequest> {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Optional
   * If provided, replaces entire existing structure of Subject Sets, Condition Groups, & Conditions
   *
   * @generated from field: repeated policy.SubjectSet subject_sets = 2;
   */
  subjectSets: SubjectSet[];

  /**
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  /**
   * @generated from field: common.MetadataUpdateEnum metadata_update_behavior = 101;
   */
  metadataUpdateBehavior: MetadataUpdateEnum;

  constructor(data?: PartialMessage<UpdateSubjectConditionSetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.UpdateSubjectConditionSetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubjectConditionSetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubjectConditionSetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubjectConditionSetRequest;

  static equals(a: UpdateSubjectConditionSetRequest | PlainMessage<UpdateSubjectConditionSetRequest> | undefined, b: UpdateSubjectConditionSetRequest | PlainMessage<UpdateSubjectConditionSetRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.UpdateSubjectConditionSetResponse
 */
export declare class UpdateSubjectConditionSetResponse extends Message<UpdateSubjectConditionSetResponse> {
  /**
   * Only ID of updated Subject Condition Set provided
   *
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;

  constructor(data?: PartialMessage<UpdateSubjectConditionSetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.UpdateSubjectConditionSetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubjectConditionSetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubjectConditionSetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubjectConditionSetResponse;

  static equals(a: UpdateSubjectConditionSetResponse | PlainMessage<UpdateSubjectConditionSetResponse> | undefined, b: UpdateSubjectConditionSetResponse | PlainMessage<UpdateSubjectConditionSetResponse> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.DeleteSubjectConditionSetRequest
 */
export declare class DeleteSubjectConditionSetRequest extends Message<DeleteSubjectConditionSetRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<DeleteSubjectConditionSetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.DeleteSubjectConditionSetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSubjectConditionSetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSubjectConditionSetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSubjectConditionSetRequest;

  static equals(a: DeleteSubjectConditionSetRequest | PlainMessage<DeleteSubjectConditionSetRequest> | undefined, b: DeleteSubjectConditionSetRequest | PlainMessage<DeleteSubjectConditionSetRequest> | undefined): boolean;
}

/**
 * @generated from message policy.subjectmapping.DeleteSubjectConditionSetResponse
 */
export declare class DeleteSubjectConditionSetResponse extends Message<DeleteSubjectConditionSetResponse> {
  /**
   * Only ID of deleted Subject Condition Set provided
   *
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;

  constructor(data?: PartialMessage<DeleteSubjectConditionSetResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "policy.subjectmapping.DeleteSubjectConditionSetResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSubjectConditionSetResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSubjectConditionSetResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSubjectConditionSetResponse;

  static equals(a: DeleteSubjectConditionSetResponse | PlainMessage<DeleteSubjectConditionSetResponse> | undefined, b: DeleteSubjectConditionSetResponse | PlainMessage<DeleteSubjectConditionSetResponse> | undefined): boolean;
}

