/**
 * @fileoverview gRPC-Web generated client stub for policy.subjectmapping
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: policy/subjectmapping/subject_mapping.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as policy_subjectmapping_subject_mapping_pb from '../../policy/subjectmapping/subject_mapping_pb'; // proto import: "policy/subjectmapping/subject_mapping.proto"


export class SubjectMappingServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorMatchSubjectMappings = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/MatchSubjectMappings',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsRequest,
    policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsResponse,
    (request: policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsResponse.deserializeBinary
  );

  matchSubjectMappings(
    request: policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsResponse>;

  matchSubjectMappings(
    request: policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsResponse>;

  matchSubjectMappings(
    request: policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.MatchSubjectMappingsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/MatchSubjectMappings',
        request,
        metadata || {},
        this.methodDescriptorMatchSubjectMappings,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/MatchSubjectMappings',
    request,
    metadata || {},
    this.methodDescriptorMatchSubjectMappings);
  }

  methodDescriptorListSubjectMappings = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/ListSubjectMappings',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsRequest,
    policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsResponse,
    (request: policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsResponse.deserializeBinary
  );

  listSubjectMappings(
    request: policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsResponse>;

  listSubjectMappings(
    request: policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsResponse>;

  listSubjectMappings(
    request: policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.ListSubjectMappingsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/ListSubjectMappings',
        request,
        metadata || {},
        this.methodDescriptorListSubjectMappings,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/ListSubjectMappings',
    request,
    metadata || {},
    this.methodDescriptorListSubjectMappings);
  }

  methodDescriptorGetSubjectMapping = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/GetSubjectMapping',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.GetSubjectMappingRequest,
    policy_subjectmapping_subject_mapping_pb.GetSubjectMappingResponse,
    (request: policy_subjectmapping_subject_mapping_pb.GetSubjectMappingRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.GetSubjectMappingResponse.deserializeBinary
  );

  getSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.GetSubjectMappingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.GetSubjectMappingResponse>;

  getSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.GetSubjectMappingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.GetSubjectMappingResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.GetSubjectMappingResponse>;

  getSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.GetSubjectMappingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.GetSubjectMappingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/GetSubjectMapping',
        request,
        metadata || {},
        this.methodDescriptorGetSubjectMapping,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/GetSubjectMapping',
    request,
    metadata || {},
    this.methodDescriptorGetSubjectMapping);
  }

  methodDescriptorCreateSubjectMapping = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/CreateSubjectMapping',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingRequest,
    policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingResponse,
    (request: policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingResponse.deserializeBinary
  );

  createSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingResponse>;

  createSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingResponse>;

  createSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.CreateSubjectMappingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/CreateSubjectMapping',
        request,
        metadata || {},
        this.methodDescriptorCreateSubjectMapping,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/CreateSubjectMapping',
    request,
    metadata || {},
    this.methodDescriptorCreateSubjectMapping);
  }

  methodDescriptorUpdateSubjectMapping = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/UpdateSubjectMapping',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingRequest,
    policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingResponse,
    (request: policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingResponse.deserializeBinary
  );

  updateSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingResponse>;

  updateSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingResponse>;

  updateSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.UpdateSubjectMappingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/UpdateSubjectMapping',
        request,
        metadata || {},
        this.methodDescriptorUpdateSubjectMapping,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/UpdateSubjectMapping',
    request,
    metadata || {},
    this.methodDescriptorUpdateSubjectMapping);
  }

  methodDescriptorDeleteSubjectMapping = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/DeleteSubjectMapping',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingRequest,
    policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingResponse,
    (request: policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingResponse.deserializeBinary
  );

  deleteSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingResponse>;

  deleteSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingResponse>;

  deleteSubjectMapping(
    request: policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.DeleteSubjectMappingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/DeleteSubjectMapping',
        request,
        metadata || {},
        this.methodDescriptorDeleteSubjectMapping,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/DeleteSubjectMapping',
    request,
    metadata || {},
    this.methodDescriptorDeleteSubjectMapping);
  }

  methodDescriptorListSubjectConditionSets = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/ListSubjectConditionSets',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsRequest,
    policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsResponse,
    (request: policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsResponse.deserializeBinary
  );

  listSubjectConditionSets(
    request: policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsResponse>;

  listSubjectConditionSets(
    request: policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsResponse>;

  listSubjectConditionSets(
    request: policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.ListSubjectConditionSetsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/ListSubjectConditionSets',
        request,
        metadata || {},
        this.methodDescriptorListSubjectConditionSets,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/ListSubjectConditionSets',
    request,
    metadata || {},
    this.methodDescriptorListSubjectConditionSets);
  }

  methodDescriptorGetSubjectConditionSet = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/GetSubjectConditionSet',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetRequest,
    policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetResponse,
    (request: policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetResponse.deserializeBinary
  );

  getSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetResponse>;

  getSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetResponse>;

  getSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.GetSubjectConditionSetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/GetSubjectConditionSet',
        request,
        metadata || {},
        this.methodDescriptorGetSubjectConditionSet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/GetSubjectConditionSet',
    request,
    metadata || {},
    this.methodDescriptorGetSubjectConditionSet);
  }

  methodDescriptorCreateSubjectConditionSet = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/CreateSubjectConditionSet',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetRequest,
    policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetResponse,
    (request: policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetResponse.deserializeBinary
  );

  createSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetResponse>;

  createSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetResponse>;

  createSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.CreateSubjectConditionSetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/CreateSubjectConditionSet',
        request,
        metadata || {},
        this.methodDescriptorCreateSubjectConditionSet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/CreateSubjectConditionSet',
    request,
    metadata || {},
    this.methodDescriptorCreateSubjectConditionSet);
  }

  methodDescriptorUpdateSubjectConditionSet = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/UpdateSubjectConditionSet',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetRequest,
    policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetResponse,
    (request: policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetResponse.deserializeBinary
  );

  updateSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetResponse>;

  updateSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetResponse>;

  updateSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.UpdateSubjectConditionSetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/UpdateSubjectConditionSet',
        request,
        metadata || {},
        this.methodDescriptorUpdateSubjectConditionSet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/UpdateSubjectConditionSet',
    request,
    metadata || {},
    this.methodDescriptorUpdateSubjectConditionSet);
  }

  methodDescriptorDeleteSubjectConditionSet = new grpcWeb.MethodDescriptor(
    '/policy.subjectmapping.SubjectMappingService/DeleteSubjectConditionSet',
    grpcWeb.MethodType.UNARY,
    policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetRequest,
    policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetResponse,
    (request: policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetRequest) => {
      return request.serializeBinary();
    },
    policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetResponse.deserializeBinary
  );

  deleteSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetResponse>;

  deleteSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetResponse) => void): grpcWeb.ClientReadableStream<policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetResponse>;

  deleteSubjectConditionSet(
    request: policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: policy_subjectmapping_subject_mapping_pb.DeleteSubjectConditionSetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/policy.subjectmapping.SubjectMappingService/DeleteSubjectConditionSet',
        request,
        metadata || {},
        this.methodDescriptorDeleteSubjectConditionSet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/policy.subjectmapping.SubjectMappingService/DeleteSubjectConditionSet',
    request,
    metadata || {},
    this.methodDescriptorDeleteSubjectConditionSet);
  }

}

