/**
 * @fileoverview gRPC-Web generated client stub for policy.namespaces
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: policy/namespaces/namespaces.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from 'grpc-web';

import * as policy_namespaces_namespaces_pb from '../../policy/namespaces/namespaces_pb'; // proto import: "policy/namespaces/namespaces.proto"

export class NamespaceServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any }
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetNamespace = new grpcWeb.MethodDescriptor(
    '/policy.namespaces.NamespaceService/GetNamespace',
    grpcWeb.MethodType.UNARY,
    policy_namespaces_namespaces_pb.GetNamespaceRequest,
    policy_namespaces_namespaces_pb.GetNamespaceResponse,
    (request: policy_namespaces_namespaces_pb.GetNamespaceRequest) => {
      return request.serializeBinary();
    },
    policy_namespaces_namespaces_pb.GetNamespaceResponse.deserializeBinary
  );

  getNamespace(
    request: policy_namespaces_namespaces_pb.GetNamespaceRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<policy_namespaces_namespaces_pb.GetNamespaceResponse>;

  getNamespace(
    request: policy_namespaces_namespaces_pb.GetNamespaceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: policy_namespaces_namespaces_pb.GetNamespaceResponse
    ) => void
  ): grpcWeb.ClientReadableStream<policy_namespaces_namespaces_pb.GetNamespaceResponse>;

  getNamespace(
    request: policy_namespaces_namespaces_pb.GetNamespaceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: policy_namespaces_namespaces_pb.GetNamespaceResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/policy.namespaces.NamespaceService/GetNamespace',
        request,
        metadata || {},
        this.methodDescriptorGetNamespace,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/policy.namespaces.NamespaceService/GetNamespace',
      request,
      metadata || {},
      this.methodDescriptorGetNamespace
    );
  }

  methodDescriptorListNamespaces = new grpcWeb.MethodDescriptor(
    '/policy.namespaces.NamespaceService/ListNamespaces',
    grpcWeb.MethodType.UNARY,
    policy_namespaces_namespaces_pb.ListNamespacesRequest,
    policy_namespaces_namespaces_pb.ListNamespacesResponse,
    (request: policy_namespaces_namespaces_pb.ListNamespacesRequest) => {
      return request.serializeBinary();
    },
    policy_namespaces_namespaces_pb.ListNamespacesResponse.deserializeBinary
  );

  listNamespaces(
    request: policy_namespaces_namespaces_pb.ListNamespacesRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<policy_namespaces_namespaces_pb.ListNamespacesResponse>;

  listNamespaces(
    request: policy_namespaces_namespaces_pb.ListNamespacesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: policy_namespaces_namespaces_pb.ListNamespacesResponse
    ) => void
  ): grpcWeb.ClientReadableStream<policy_namespaces_namespaces_pb.ListNamespacesResponse>;

  listNamespaces(
    request: policy_namespaces_namespaces_pb.ListNamespacesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: policy_namespaces_namespaces_pb.ListNamespacesResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/policy.namespaces.NamespaceService/ListNamespaces',
        request,
        metadata || {},
        this.methodDescriptorListNamespaces,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/policy.namespaces.NamespaceService/ListNamespaces',
      request,
      metadata || {},
      this.methodDescriptorListNamespaces
    );
  }

  methodDescriptorCreateNamespace = new grpcWeb.MethodDescriptor(
    '/policy.namespaces.NamespaceService/CreateNamespace',
    grpcWeb.MethodType.UNARY,
    policy_namespaces_namespaces_pb.CreateNamespaceRequest,
    policy_namespaces_namespaces_pb.CreateNamespaceResponse,
    (request: policy_namespaces_namespaces_pb.CreateNamespaceRequest) => {
      return request.serializeBinary();
    },
    policy_namespaces_namespaces_pb.CreateNamespaceResponse.deserializeBinary
  );

  createNamespace(
    request: policy_namespaces_namespaces_pb.CreateNamespaceRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<policy_namespaces_namespaces_pb.CreateNamespaceResponse>;

  createNamespace(
    request: policy_namespaces_namespaces_pb.CreateNamespaceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: policy_namespaces_namespaces_pb.CreateNamespaceResponse
    ) => void
  ): grpcWeb.ClientReadableStream<policy_namespaces_namespaces_pb.CreateNamespaceResponse>;

  createNamespace(
    request: policy_namespaces_namespaces_pb.CreateNamespaceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: policy_namespaces_namespaces_pb.CreateNamespaceResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/policy.namespaces.NamespaceService/CreateNamespace',
        request,
        metadata || {},
        this.methodDescriptorCreateNamespace,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/policy.namespaces.NamespaceService/CreateNamespace',
      request,
      metadata || {},
      this.methodDescriptorCreateNamespace
    );
  }

  methodDescriptorUpdateNamespace = new grpcWeb.MethodDescriptor(
    '/policy.namespaces.NamespaceService/UpdateNamespace',
    grpcWeb.MethodType.UNARY,
    policy_namespaces_namespaces_pb.UpdateNamespaceRequest,
    policy_namespaces_namespaces_pb.UpdateNamespaceResponse,
    (request: policy_namespaces_namespaces_pb.UpdateNamespaceRequest) => {
      return request.serializeBinary();
    },
    policy_namespaces_namespaces_pb.UpdateNamespaceResponse.deserializeBinary
  );

  updateNamespace(
    request: policy_namespaces_namespaces_pb.UpdateNamespaceRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<policy_namespaces_namespaces_pb.UpdateNamespaceResponse>;

  updateNamespace(
    request: policy_namespaces_namespaces_pb.UpdateNamespaceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: policy_namespaces_namespaces_pb.UpdateNamespaceResponse
    ) => void
  ): grpcWeb.ClientReadableStream<policy_namespaces_namespaces_pb.UpdateNamespaceResponse>;

  updateNamespace(
    request: policy_namespaces_namespaces_pb.UpdateNamespaceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: policy_namespaces_namespaces_pb.UpdateNamespaceResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/policy.namespaces.NamespaceService/UpdateNamespace',
        request,
        metadata || {},
        this.methodDescriptorUpdateNamespace,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/policy.namespaces.NamespaceService/UpdateNamespace',
      request,
      metadata || {},
      this.methodDescriptorUpdateNamespace
    );
  }

  methodDescriptorDeactivateNamespace = new grpcWeb.MethodDescriptor(
    '/policy.namespaces.NamespaceService/DeactivateNamespace',
    grpcWeb.MethodType.UNARY,
    policy_namespaces_namespaces_pb.DeactivateNamespaceRequest,
    policy_namespaces_namespaces_pb.DeactivateNamespaceResponse,
    (request: policy_namespaces_namespaces_pb.DeactivateNamespaceRequest) => {
      return request.serializeBinary();
    },
    policy_namespaces_namespaces_pb.DeactivateNamespaceResponse.deserializeBinary
  );

  deactivateNamespace(
    request: policy_namespaces_namespaces_pb.DeactivateNamespaceRequest,
    metadata?: grpcWeb.Metadata | null
  ): Promise<policy_namespaces_namespaces_pb.DeactivateNamespaceResponse>;

  deactivateNamespace(
    request: policy_namespaces_namespaces_pb.DeactivateNamespaceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: policy_namespaces_namespaces_pb.DeactivateNamespaceResponse
    ) => void
  ): grpcWeb.ClientReadableStream<policy_namespaces_namespaces_pb.DeactivateNamespaceResponse>;

  deactivateNamespace(
    request: policy_namespaces_namespaces_pb.DeactivateNamespaceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: policy_namespaces_namespaces_pb.DeactivateNamespaceResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + '/policy.namespaces.NamespaceService/DeactivateNamespace',
        request,
        metadata || {},
        this.methodDescriptorDeactivateNamespace,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + '/policy.namespaces.NamespaceService/DeactivateNamespace',
      request,
      metadata || {},
      this.methodDescriptorDeactivateNamespace
    );
  }
}
