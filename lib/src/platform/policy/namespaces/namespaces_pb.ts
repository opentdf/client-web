// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file policy/namespaces/namespaces.proto (package policy.namespaces, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { Namespace } from '../objects_pb.js';
import { ActiveStateEnum, MetadataMutable, MetadataUpdateEnum } from '../../common/common_pb.js';

/**
 * @generated from message policy.namespaces.GetNamespaceRequest
 */
export class GetNamespaceRequest extends Message<GetNamespaceRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<GetNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.namespaces.GetNamespaceRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamespaceRequest {
    return new GetNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamespaceRequest {
    return new GetNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetNamespaceRequest {
    return new GetNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetNamespaceRequest | PlainMessage<GetNamespaceRequest> | undefined,
    b: GetNamespaceRequest | PlainMessage<GetNamespaceRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetNamespaceRequest, a, b);
  }
}

/**
 * @generated from message policy.namespaces.GetNamespaceResponse
 */
export class GetNamespaceResponse extends Message<GetNamespaceResponse> {
  /**
   * @generated from field: policy.Namespace namespace = 1;
   */
  namespace?: Namespace;

  constructor(data?: PartialMessage<GetNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.namespaces.GetNamespaceResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'namespace', kind: 'message', T: Namespace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamespaceResponse {
    return new GetNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamespaceResponse {
    return new GetNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetNamespaceResponse {
    return new GetNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetNamespaceResponse | PlainMessage<GetNamespaceResponse> | undefined,
    b: GetNamespaceResponse | PlainMessage<GetNamespaceResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetNamespaceResponse, a, b);
  }
}

/**
 * @generated from message policy.namespaces.ListNamespacesRequest
 */
export class ListNamespacesRequest extends Message<ListNamespacesRequest> {
  /**
   * ACTIVE by default when not specified
   *
   * @generated from field: common.ActiveStateEnum state = 1;
   */
  state = ActiveStateEnum.UNSPECIFIED;

  constructor(data?: PartialMessage<ListNamespacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.namespaces.ListNamespacesRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'state', kind: 'enum', T: proto3.getEnumType(ActiveStateEnum) },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListNamespacesRequest {
    return new ListNamespacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNamespacesRequest {
    return new ListNamespacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListNamespacesRequest {
    return new ListNamespacesRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListNamespacesRequest | PlainMessage<ListNamespacesRequest> | undefined,
    b: ListNamespacesRequest | PlainMessage<ListNamespacesRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListNamespacesRequest, a, b);
  }
}

/**
 * @generated from message policy.namespaces.ListNamespacesResponse
 */
export class ListNamespacesResponse extends Message<ListNamespacesResponse> {
  /**
   * @generated from field: repeated policy.Namespace namespaces = 1;
   */
  namespaces: Namespace[] = [];

  constructor(data?: PartialMessage<ListNamespacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.namespaces.ListNamespacesResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'namespaces', kind: 'message', T: Namespace, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListNamespacesResponse {
    return new ListNamespacesResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListNamespacesResponse {
    return new ListNamespacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListNamespacesResponse {
    return new ListNamespacesResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListNamespacesResponse | PlainMessage<ListNamespacesResponse> | undefined,
    b: ListNamespacesResponse | PlainMessage<ListNamespacesResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListNamespacesResponse, a, b);
  }
}

/**
 * @generated from message policy.namespaces.CreateNamespaceRequest
 */
export class CreateNamespaceRequest extends Message<CreateNamespaceRequest> {
  /**
   * Required
   *
   * @generated from field: string name = 1;
   */
  name = '';

  /**
   * Optional
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  constructor(data?: PartialMessage<CreateNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.namespaces.CreateNamespaceRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 100, name: 'metadata', kind: 'message', T: MetadataMutable },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateNamespaceRequest | PlainMessage<CreateNamespaceRequest> | undefined,
    b: CreateNamespaceRequest | PlainMessage<CreateNamespaceRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateNamespaceRequest, a, b);
  }
}

/**
 * @generated from message policy.namespaces.CreateNamespaceResponse
 */
export class CreateNamespaceResponse extends Message<CreateNamespaceResponse> {
  /**
   * @generated from field: policy.Namespace namespace = 1;
   */
  namespace?: Namespace;

  constructor(data?: PartialMessage<CreateNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.namespaces.CreateNamespaceResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'namespace', kind: 'message', T: Namespace },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateNamespaceResponse | PlainMessage<CreateNamespaceResponse> | undefined,
    b: CreateNamespaceResponse | PlainMessage<CreateNamespaceResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateNamespaceResponse, a, b);
  }
}

/**
 * @generated from message policy.namespaces.UpdateNamespaceRequest
 */
export class UpdateNamespaceRequest extends Message<UpdateNamespaceRequest> {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * Optional
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  /**
   * @generated from field: common.MetadataUpdateEnum metadata_update_behavior = 101;
   */
  metadataUpdateBehavior = MetadataUpdateEnum.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.namespaces.UpdateNamespaceRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 100, name: 'metadata', kind: 'message', T: MetadataMutable },
    {
      no: 101,
      name: 'metadata_update_behavior',
      kind: 'enum',
      T: proto3.getEnumType(MetadataUpdateEnum),
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateNamespaceRequest {
    return new UpdateNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateNamespaceRequest {
    return new UpdateNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateNamespaceRequest {
    return new UpdateNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateNamespaceRequest | PlainMessage<UpdateNamespaceRequest> | undefined,
    b: UpdateNamespaceRequest | PlainMessage<UpdateNamespaceRequest> | undefined
  ): boolean {
    return proto3.util.equals(UpdateNamespaceRequest, a, b);
  }
}

/**
 * @generated from message policy.namespaces.UpdateNamespaceResponse
 */
export class UpdateNamespaceResponse extends Message<UpdateNamespaceResponse> {
  /**
   * @generated from field: policy.Namespace namespace = 1;
   */
  namespace?: Namespace;

  constructor(data?: PartialMessage<UpdateNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.namespaces.UpdateNamespaceResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'namespace', kind: 'message', T: Namespace },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateNamespaceResponse {
    return new UpdateNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateNamespaceResponse {
    return new UpdateNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateNamespaceResponse {
    return new UpdateNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateNamespaceResponse | PlainMessage<UpdateNamespaceResponse> | undefined,
    b: UpdateNamespaceResponse | PlainMessage<UpdateNamespaceResponse> | undefined
  ): boolean {
    return proto3.util.equals(UpdateNamespaceResponse, a, b);
  }
}

/**
 * @generated from message policy.namespaces.DeactivateNamespaceRequest
 */
export class DeactivateNamespaceRequest extends Message<DeactivateNamespaceRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<DeactivateNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.namespaces.DeactivateNamespaceRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeactivateNamespaceRequest {
    return new DeactivateNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeactivateNamespaceRequest {
    return new DeactivateNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeactivateNamespaceRequest {
    return new DeactivateNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeactivateNamespaceRequest | PlainMessage<DeactivateNamespaceRequest> | undefined,
    b: DeactivateNamespaceRequest | PlainMessage<DeactivateNamespaceRequest> | undefined
  ): boolean {
    return proto3.util.equals(DeactivateNamespaceRequest, a, b);
  }
}

/**
 * @generated from message policy.namespaces.DeactivateNamespaceResponse
 */
export class DeactivateNamespaceResponse extends Message<DeactivateNamespaceResponse> {
  constructor(data?: PartialMessage<DeactivateNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'policy.namespaces.DeactivateNamespaceResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeactivateNamespaceResponse {
    return new DeactivateNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeactivateNamespaceResponse {
    return new DeactivateNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeactivateNamespaceResponse {
    return new DeactivateNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeactivateNamespaceResponse | PlainMessage<DeactivateNamespaceResponse> | undefined,
    b: DeactivateNamespaceResponse | PlainMessage<DeactivateNamespaceResponse> | undefined
  ): boolean {
    return proto3.util.equals(DeactivateNamespaceResponse, a, b);
  }
}
