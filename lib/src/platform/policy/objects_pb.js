// @generated by protoc-gen-es v1.9.0 with parameter "target=js+dts,import_extension=none"
// @generated from file policy/objects.proto (package policy, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BoolValue, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../common/common_pb";

/**
 * buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package
 *
 * @generated from enum policy.AttributeRuleTypeEnum
 */
export const AttributeRuleTypeEnum = /*@__PURE__*/ proto3.makeEnum(
  "policy.AttributeRuleTypeEnum",
  [
    {no: 0, name: "ATTRIBUTE_RULE_TYPE_ENUM_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "ATTRIBUTE_RULE_TYPE_ENUM_ALL_OF", localName: "ALL_OF"},
    {no: 2, name: "ATTRIBUTE_RULE_TYPE_ENUM_ANY_OF", localName: "ANY_OF"},
    {no: 3, name: "ATTRIBUTE_RULE_TYPE_ENUM_HIERARCHY", localName: "HIERARCHY"},
  ],
);

/**
 * buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package
 *
 * @generated from enum policy.SubjectMappingOperatorEnum
 */
export const SubjectMappingOperatorEnum = /*@__PURE__*/ proto3.makeEnum(
  "policy.SubjectMappingOperatorEnum",
  [
    {no: 0, name: "SUBJECT_MAPPING_OPERATOR_ENUM_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "SUBJECT_MAPPING_OPERATOR_ENUM_IN", localName: "IN"},
    {no: 2, name: "SUBJECT_MAPPING_OPERATOR_ENUM_NOT_IN", localName: "NOT_IN"},
  ],
);

/**
 * buflint ENUM_VALUE_PREFIX: to make sure that C++ scoping rules aren't violated when users add new enum values to an enum in a given package
 *
 * @generated from enum policy.ConditionBooleanTypeEnum
 */
export const ConditionBooleanTypeEnum = /*@__PURE__*/ proto3.makeEnum(
  "policy.ConditionBooleanTypeEnum",
  [
    {no: 0, name: "CONDITION_BOOLEAN_TYPE_ENUM_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "CONDITION_BOOLEAN_TYPE_ENUM_AND", localName: "AND"},
    {no: 2, name: "CONDITION_BOOLEAN_TYPE_ENUM_OR", localName: "OR"},
  ],
);

/**
 * @generated from message policy.Namespace
 */
export const Namespace = /*@__PURE__*/ proto3.makeMessageType(
  "policy.Namespace",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "active", kind: "message", T: BoolValue },
    { no: 5, name: "metadata", kind: "message", T: Metadata },
  ],
);

/**
 * @generated from message policy.Attribute
 */
export const Attribute = /*@__PURE__*/ proto3.makeMessageType(
  "policy.Attribute",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "message", T: Namespace },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rule", kind: "enum", T: proto3.getEnumType(AttributeRuleTypeEnum) },
    { no: 5, name: "values", kind: "message", T: Value, repeated: true },
    { no: 6, name: "grants", kind: "message", T: KeyAccessServer, repeated: true },
    { no: 7, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "active", kind: "message", T: BoolValue },
    { no: 100, name: "metadata", kind: "message", T: Metadata },
  ],
);

/**
 * @generated from message policy.Value
 */
export const Value = /*@__PURE__*/ proto3.makeMessageType(
  "policy.Value",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attribute", kind: "message", T: Attribute },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "members", kind: "message", T: Value, repeated: true },
    { no: 5, name: "grants", kind: "message", T: KeyAccessServer, repeated: true },
    { no: 6, name: "fqn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "active", kind: "message", T: BoolValue },
    { no: 8, name: "subject_mappings", kind: "message", T: SubjectMapping, repeated: true },
    { no: 100, name: "metadata", kind: "message", T: Metadata },
  ],
);

/**
 * An action an entity can take
 *
 * @generated from message policy.Action
 */
export const Action = /*@__PURE__*/ proto3.makeMessageType(
  "policy.Action",
  () => [
    { no: 1, name: "standard", kind: "enum", T: proto3.getEnumType(Action_StandardAction), oneof: "value" },
    { no: 2, name: "custom", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
  ],
);

/**
 * Standard actions supported by the platform
 *
 * @generated from enum policy.Action.StandardAction
 */
export const Action_StandardAction = /*@__PURE__*/ proto3.makeEnum(
  "policy.Action.StandardAction",
  [
    {no: 0, name: "STANDARD_ACTION_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "STANDARD_ACTION_DECRYPT", localName: "DECRYPT"},
    {no: 2, name: "STANDARD_ACTION_TRANSMIT", localName: "TRANSMIT"},
  ],
);

/**
 *
 * Subject Mapping: A Policy assigning Subject Set(s) to a permitted attribute value + action(s) combination
 *
 * Example: Subjects in sets 1 and 2 are entitled attribute value http://wwww.example.org/attr/example/value/one
 * with permitted actions TRANSMIT and DECRYPT
 * {
 * "id": "someid",
 * "attribute_value": {example_one_attribute_value...},
 * "subject_condition_set": {"subject_sets":[{subject_set_1},{subject_set_2}]...},
 * "actions": [{"standard": "STANDARD_ACTION_DECRYPT"}", {"standard": "STANDARD_ACTION_TRANSMIT"}]
 * }
 *
 * @generated from message policy.SubjectMapping
 */
export const SubjectMapping = /*@__PURE__*/ proto3.makeMessageType(
  "policy.SubjectMapping",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attribute_value", kind: "message", T: Value },
    { no: 3, name: "subject_condition_set", kind: "message", T: SubjectConditionSet },
    { no: 4, name: "actions", kind: "message", T: Action, repeated: true },
    { no: 100, name: "metadata", kind: "message", T: Metadata },
  ],
);

/**
 * *
 * A Condition defines a rule of <the value at the flattened 'selector value' location> <operator> <subject external values>
 *
 * Example:  Subjects with a field selected by the flattened selector "'.division'" and a value of "Accounting" or "Marketing":
 * {
 * "subject_external_selector_value": "'.division'",
 * "operator": "SUBJECT_MAPPING_OPERATOR_ENUM_IN",
 * "subject_external_values" : ["Accounting", "Marketing"]
 * }
 *
 * Example: Subjects that are not part of the Fantastic Four according to their alias field:
 * {
 * "subject_external_selector_value": "'.data[0].alias'",
 * "operator": "SUBJECT_MAPPING_OPERATOR_ENUM_NOT_IN",
 * "subject_external_values" : ["mister_fantastic", "the_thing", "human_torch", "invisible_woman"]
 * }
 *
 * @generated from message policy.Condition
 */
export const Condition = /*@__PURE__*/ proto3.makeMessageType(
  "policy.Condition",
  () => [
    { no: 1, name: "subject_external_selector_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator", kind: "enum", T: proto3.getEnumType(SubjectMappingOperatorEnum) },
    { no: 3, name: "subject_external_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * A collection of Conditions evaluated by the boolean_operator provided
 *
 * @generated from message policy.ConditionGroup
 */
export const ConditionGroup = /*@__PURE__*/ proto3.makeMessageType(
  "policy.ConditionGroup",
  () => [
    { no: 1, name: "conditions", kind: "message", T: Condition, repeated: true },
    { no: 2, name: "boolean_operator", kind: "enum", T: proto3.getEnumType(ConditionBooleanTypeEnum) },
  ],
);

/**
 * A collection of Condition Groups
 *
 * @generated from message policy.SubjectSet
 */
export const SubjectSet = /*@__PURE__*/ proto3.makeMessageType(
  "policy.SubjectSet",
  () => [
    { no: 1, name: "condition_groups", kind: "message", T: ConditionGroup, repeated: true },
  ],
);

/**
 *
 * A container for multiple Subject Sets, each containing Condition Groups, each containing Conditions. Multiple Subject Sets in a SubjectConditionSet
 * are evaluated with AND logic. As each Subject Mapping has only one Attribute Value, the SubjectConditionSet is reusable across multiple
 * Subject Mappings / Attribute Values and is an independent unit.
 *
 * @generated from message policy.SubjectConditionSet
 */
export const SubjectConditionSet = /*@__PURE__*/ proto3.makeMessageType(
  "policy.SubjectConditionSet",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject_sets", kind: "message", T: SubjectSet, repeated: true },
    { no: 100, name: "metadata", kind: "message", T: Metadata },
  ],
);

/**
 *
 *
 * A property of a Subject/Entity as its selector expression -> value result pair. This would mirror external user attributes retrieved
 * from an authoritative source such as an IDP (Identity Provider) or User Store. Examples include such ADFS/LDAP, OKTA, etc.
 * For now, a valid property must contain both a selector expression & a resulting value.
 *
 * The external_selector_value is a specifier to select a value from a flattened external representation of an Entity (such as from idP/LDAP),
 * and the external_value is the value selected by the external_selector_value on that Entity Representation (Subject Context). These mirror the Condition.
 *
 * @generated from message policy.SubjectProperty
 */
export const SubjectProperty = /*@__PURE__*/ proto3.makeMessageType(
  "policy.SubjectProperty",
  () => [
    { no: 1, name: "external_selector_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "external_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 *
 * Resource Mappings (aka Access Control Resource Encodings aka ACRE) are structures supporting the mapping of Resources and Attribute Values
 *
 * @generated from message policy.ResourceMapping
 */
export const ResourceMapping = /*@__PURE__*/ proto3.makeMessageType(
  "policy.ResourceMapping",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: Metadata },
    { no: 3, name: "attribute_value", kind: "message", T: Value },
    { no: 4, name: "terms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 *
 * Key Access Server Registry
 *
 * @generated from message policy.KeyAccessServer
 */
export const KeyAccessServer = /*@__PURE__*/ proto3.makeMessageType(
  "policy.KeyAccessServer",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key", kind: "message", T: PublicKey },
    { no: 100, name: "metadata", kind: "message", T: Metadata },
  ],
);

/**
 * @generated from message policy.PublicKey
 */
export const PublicKey = /*@__PURE__*/ proto3.makeMessageType(
  "policy.PublicKey",
  () => [
    { no: 1, name: "remote", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "public_key" },
    { no: 2, name: "local", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "public_key" },
  ],
);

