// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file entityresolution/entity_resolution.proto (package entityresolution, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, Struct } from "@bufbuild/protobuf";
import { Entity } from "../authorization/authorization_pb.js";

/**
 *
 * Example: Get idp attributes for bob and alice (both represented using an email address
 * {
 * "entities": [
 * {
 * "id": "e1",
 * "emailAddress": "bob@example.org"
 * },
 * {
 * "id": "e2",
 * "emailAddress": "alice@example.org"
 * }
 * ]
 * }
 *
 *
 * @generated from message entityresolution.ResolveEntitiesRequest
 */
export class ResolveEntitiesRequest extends Message<ResolveEntitiesRequest> {
  /**
   * @generated from field: repeated authorization.Entity entities = 1;
   */
  entities: Entity[] = [];

  constructor(data?: PartialMessage<ResolveEntitiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "entityresolution.ResolveEntitiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entities", kind: "message", T: Entity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveEntitiesRequest {
    return new ResolveEntitiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveEntitiesRequest {
    return new ResolveEntitiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveEntitiesRequest {
    return new ResolveEntitiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveEntitiesRequest | PlainMessage<ResolveEntitiesRequest> | undefined, b: ResolveEntitiesRequest | PlainMessage<ResolveEntitiesRequest> | undefined): boolean {
    return proto3.util.equals(ResolveEntitiesRequest, a, b);
  }
}

/**
 * @generated from message entityresolution.EntityRepresentation
 */
export class EntityRepresentation extends Message<EntityRepresentation> {
  /**
   * @generated from field: repeated google.protobuf.Struct additional_props = 1;
   */
  additionalProps: Struct[] = [];

  /**
   * ephemeral entity id from the request
   *
   * @generated from field: string original_id = 2;
   */
  originalId = "";

  constructor(data?: PartialMessage<EntityRepresentation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "entityresolution.EntityRepresentation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "additional_props", kind: "message", T: Struct, repeated: true },
    { no: 2, name: "original_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityRepresentation {
    return new EntityRepresentation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityRepresentation {
    return new EntityRepresentation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityRepresentation {
    return new EntityRepresentation().fromJsonString(jsonString, options);
  }

  static equals(a: EntityRepresentation | PlainMessage<EntityRepresentation> | undefined, b: EntityRepresentation | PlainMessage<EntityRepresentation> | undefined): boolean {
    return proto3.util.equals(EntityRepresentation, a, b);
  }
}

/**
 *
 * Example: Get idp attributes for bob and alice
 * {
 * "entity_representations": [
 * {
 * "idp_entity_id": "e1",
 * "additional_props": {"someAttr1":"someValue1"}
 * },
 * {
 * "idp_entity_id": "e2",
 * "additional_props": {"someAttr2":"someValue2"}
 * }
 * ]
 * }
 *
 *
 * @generated from message entityresolution.ResolveEntitiesResponse
 */
export class ResolveEntitiesResponse extends Message<ResolveEntitiesResponse> {
  /**
   * @generated from field: repeated entityresolution.EntityRepresentation entity_representations = 1;
   */
  entityRepresentations: EntityRepresentation[] = [];

  constructor(data?: PartialMessage<ResolveEntitiesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "entityresolution.ResolveEntitiesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_representations", kind: "message", T: EntityRepresentation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveEntitiesResponse {
    return new ResolveEntitiesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveEntitiesResponse {
    return new ResolveEntitiesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveEntitiesResponse {
    return new ResolveEntitiesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveEntitiesResponse | PlainMessage<ResolveEntitiesResponse> | undefined, b: ResolveEntitiesResponse | PlainMessage<ResolveEntitiesResponse> | undefined): boolean {
    return proto3.util.equals(ResolveEntitiesResponse, a, b);
  }
}

/**
 * @generated from message entityresolution.EntityNotFoundError
 */
export class EntityNotFoundError extends Message<EntityNotFoundError> {
  /**
   * @generated from field: int32 code = 1;
   */
  code = 0;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: repeated google.protobuf.Any details = 3;
   */
  details: Any[] = [];

  /**
   * @generated from field: string entity = 4;
   */
  entity = "";

  constructor(data?: PartialMessage<EntityNotFoundError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "entityresolution.EntityNotFoundError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "details", kind: "message", T: Any, repeated: true },
    { no: 4, name: "entity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityNotFoundError {
    return new EntityNotFoundError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityNotFoundError {
    return new EntityNotFoundError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityNotFoundError {
    return new EntityNotFoundError().fromJsonString(jsonString, options);
  }

  static equals(a: EntityNotFoundError | PlainMessage<EntityNotFoundError> | undefined, b: EntityNotFoundError | PlainMessage<EntityNotFoundError> | undefined): boolean {
    return proto3.util.equals(EntityNotFoundError, a, b);
  }
}

