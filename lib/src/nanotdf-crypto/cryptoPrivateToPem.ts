/**
 *
 * Copyright (c) 2016 SafeBash
 * Cryptography consultant: Andrew Kozlik, Ph.D.
 *
 * @link https://github.com/safebash/opencrypto
 *
 */

/**
 * MIT License
 *
 * Copyright (c) 2016 SafeBash
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import * as base64 from '../encodings/base64.js';
import getCryptoLib from './getCryptoLib.js';
import addNewLines from './helpers/addNewLines.js';

const EXPORT_KEY_TYPE = 'pkcs8';
const PRIVATE_KEY_STRING = 'private';
const CRYPTO_KEY_OBJECT_STRING = '[object CryptoKey]';

/**
 *
 * Converts asymmetric private key from CryptoKey to PEM format
 * - privateKey    {CryptoKey}     default: "undefined" CryptoKey generated by WebCrypto API
 */
export default async function cryptoPrivateToPem(privateKey: CryptoKey): Promise<string> {
  const crypto = getCryptoLib();
  if (
    Object.prototype.toString.call(privateKey) !== CRYPTO_KEY_OBJECT_STRING &&
    privateKey.type !== PRIVATE_KEY_STRING
  ) {
    throw new TypeError('Expected input to be a CryptoKey Object');
  }

  const exportedPrivateKey = await crypto.exportKey(EXPORT_KEY_TYPE, privateKey);
  const b64 = base64.encodeArrayBuffer(exportedPrivateKey);
  const pem = addNewLines(b64); // FIXME refactor method
  return `-----BEGIN PRIVATE KEY-----\r\n${pem}-----END PRIVATE KEY-----`;
}
